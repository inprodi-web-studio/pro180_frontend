// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: okr6zFws8g9BFEw4Fons9x
// Component: bIEem4FIL1oz

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import AppShell from "../../AppShell"; // plasmic-import: zdymZc8lM6F1/component
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import Form from "../../Form"; // plasmic-import: rb5_PS-3AnYe/component
import FormField from "../../FormField"; // plasmic-import: yLHiIXcGvJuv/component
import NumberInput from "/components/NumberInput/NumberInput.tsx"; // plasmic-import: KpgNf9gXNZR4/codeComponent
import Button from "/components/Button/Button.tsx"; // plasmic-import: fWdCiIO3iYJP/codeComponent
import Statistic from "../../Statistic"; // plasmic-import: XTNsZrFRrZal/component
import Card from "/components/Card/Card.tsx"; // plasmic-import: eSaP_wpvN1LT/codeComponent
import { SimpleChart } from "@plasmicpkgs/react-chartjs-2";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import {
  ColorSchemeValue,
  useColorScheme
} from "../inprodi_design_system/PlasmicGlobalVariant__ColorScheme"; // plasmic-import: gdgBwRVFC7MJ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import plasmic_inprodi_design_system_css from "../inprodi_design_system/plasmic.module.css"; // plasmic-import: 5nPYJMkHKsudqrrya3SLGq/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: okr6zFws8g9BFEw4Fons9x/projectcss
import sty from "./PlasmicDashboard.module.css"; // plasmic-import: bIEem4FIL1oz/css

import PhoneOutgoingDuotonesvgIcon from "../inprodi_design_system/icons/PlasmicIcon__PhoneOutgoingDuotonesvg"; // plasmic-import: KGAOVNOp5KFl/icon
import EnvelopeOpenDuotonesvgIcon from "../inprodi_design_system/icons/PlasmicIcon__EnvelopeOpenDuotonesvg"; // plasmic-import: gKwun_EQTujt/icon
import ScrollDuotonesvgIcon from "../inprodi_design_system/icons/PlasmicIcon__ScrollDuotonesvg"; // plasmic-import: 8QgUleY3Rjyy/icon
import HandshakeDuotonesvgIcon from "../inprodi_design_system/icons/PlasmicIcon__HandshakeDuotonesvg"; // plasmic-import: AhKE7oDbzh6k/icon
import PhoneCallDuotonesvgIcon from "../inprodi_design_system/icons/PlasmicIcon__PhoneCallDuotonesvg"; // plasmic-import: udynwHm0S3r8/icon
import MailboxDuotonesvgIcon from "../inprodi_design_system/icons/PlasmicIcon__MailboxDuotonesvg"; // plasmic-import: cMrv_WveJmMP/icon
import CheckCircleDuotonesvgIcon from "../inprodi_design_system/icons/PlasmicIcon__CheckCircleDuotonesvg"; // plasmic-import: W6oixRWCrp9h/icon
import MoneyWavyDuotonesvgIcon from "../inprodi_design_system/icons/PlasmicIcon__MoneyWavyDuotonesvg"; // plasmic-import: BKdwVE9CoTra/icon

import { showNotification as __fn_showNotification } from "../../../helpers/showNotification"; // plasmic-import: showNotification/customFunction

createPlasmicElementProxy;

export type PlasmicDashboard__VariantMembers = {};
export type PlasmicDashboard__VariantsArgs = {};
type VariantPropType = keyof PlasmicDashboard__VariantsArgs;
export const PlasmicDashboard__VariantProps = new Array<VariantPropType>();

export type PlasmicDashboard__ArgsType = {};
type ArgPropType = keyof PlasmicDashboard__ArgsType;
export const PlasmicDashboard__ArgProps = new Array<ArgPropType>();

export type PlasmicDashboard__OverridesType = {
  mainSection?: Flex__<"div">;
  appShell?: Flex__<typeof AppShell>;
  container?: Flex__<"div">;
  registerModal?: Flex__<typeof AntdModal>;
  statForm?: Flex__<typeof Form>;
  callsMade?: Flex__<typeof FormField>;
  callsMadeInput?: Flex__<typeof NumberInput>;
  callsAnswered?: Flex__<typeof FormField>;
  callsAnsweredInput?: Flex__<typeof NumberInput>;
  callsMoney?: Flex__<typeof FormField>;
  callsMoneyInput?: Flex__<typeof NumberInput>;
  lettersMade?: Flex__<typeof FormField>;
  letterMadeInput?: Flex__<typeof NumberInput>;
  lettersAnswered?: Flex__<typeof FormField>;
  lettersAnsweredInput?: Flex__<typeof NumberInput>;
  lettersMoney?: Flex__<typeof FormField>;
  lettersMoneyInput?: Flex__<typeof NumberInput>;
  mlsProperties?: Flex__<typeof FormField>;
  mlsPropertiesInput?: Flex__<typeof NumberInput>;
  lettersProperties?: Flex__<typeof FormField>;
  lettersPropertiesInput?: Flex__<typeof NumberInput>;
  callsProperties?: Flex__<typeof FormField>;
  callsPropertiesInput?: Flex__<typeof NumberInput>;
  offersMadeMls?: Flex__<typeof FormField>;
  offersMadeMlsInput?: Flex__<typeof NumberInput>;
  offersMadeLetters?: Flex__<typeof FormField>;
  offersMadeLettersInput?: Flex__<typeof NumberInput>;
  offersMadeCalls?: Flex__<typeof FormField>;
  offersMadeCallsInput?: Flex__<typeof NumberInput>;
  offersApprovedMls?: Flex__<typeof FormField>;
  offersApprovedMlsInput?: Flex__<typeof NumberInput>;
  offersApprovedLetters?: Flex__<typeof FormField>;
  offersApprovedLettersInput?: Flex__<typeof NumberInput>;
  offersApprovedCalls?: Flex__<typeof FormField>;
  offersApprovedCallsInput?: Flex__<typeof NumberInput>;
  deals?: Flex__<typeof FormField>;
  dealsInput?: Flex__<typeof NumberInput>;
  container2?: Flex__<"div">;
  stats?: Flex__<"div">;
  icon?: Flex__<"svg">;
  icon2?: Flex__<"svg">;
  icon3?: Flex__<"svg">;
  icon4?: Flex__<"svg">;
  icon6?: Flex__<"svg">;
  icon7?: Flex__<"svg">;
  icon5?: Flex__<"svg">;
  icon8?: Flex__<"svg">;
  charts?: Flex__<"div">;
};

export interface DefaultDashboardProps {}

const $$ = {
  showNotification: __fn_showNotification
};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicDashboard__RenderFunc(props: {
  variants: PlasmicDashboard__VariantsArgs;
  args: PlasmicDashboard__ArgsType;
  overrides: PlasmicDashboard__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "registerModal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "statForm.values",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "statForm.errors",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "statForm.validation",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "callsMade.error",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "callsMadeInput.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "callsAnswered.error",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "callsAnsweredInput.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "callsMoney.error",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "callsMoneyInput.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "lettersMade.error",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "letterMadeInput.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "lettersAnswered.error",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "lettersAnsweredInput.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "lettersMoney.error",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "lettersMoneyInput.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "mlsProperties.error",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "mlsPropertiesInput.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "lettersProperties.error",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "lettersPropertiesInput.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "callsProperties.error",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "callsPropertiesInput.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "offersMadeMls.error",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "offersMadeMlsInput.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "offersMadeLetters.error",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "offersMadeLettersInput.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "offersMadeCalls.error",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "offersMadeCallsInput.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "offersApprovedMls.error",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "offersApprovedMlsInput.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "offersApprovedLetters.error",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "offersApprovedLettersInput.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "offersApprovedCalls.error",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "offersApprovedCallsInput.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "deals.error",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "dealsInput.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "query",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({ register: false })
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    getStats: usePlasmicDataOp(() => {
      return {
        sourceId: "9SbcJmsXuR3ob6ZWwKJZY9",
        opId: "b49a65a0-71aa-407c-8c4e-05cd7f881624",
        userArgs: {
          headers: [`Bearer ${$ctx.token}`]
        },
        cacheKey: `plasmic.$.${(() => {
          try {
            return "Stats";
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return "";
            }
            throw e;
          }
        })()}.$.b49a65a0-71aa-407c-8c4e-05cd7f881624.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  const globalVariants = ensureGlobalVariants({
    colorScheme: useColorScheme()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"mainSection"}
          data-plasmic-override={overrides.mainSection}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            plasmic_inprodi_design_system_css.plasmic_tokens,
            sty.mainSection,
            {
              [sty.mainSectionglobal_colorScheme_dark]: hasVariant(
                globalVariants,
                "colorScheme",
                "dark"
              ),
              [sty.mainSectionglobal_colorScheme_light]: hasVariant(
                globalVariants,
                "colorScheme",
                "light"
              )
            }
          )}
        >
          <AppShell
            data-plasmic-name={"appShell"}
            data-plasmic-override={overrides.appShell}
            className={classNames("__wab_instance", sty.appShell, {
              [sty.appShellglobal_colorScheme_dark]: hasVariant(
                globalVariants,
                "colorScheme",
                "dark"
              )
            })}
            content2={
              <DataCtxReader__>
                {$ctx => (
                  <React.Fragment>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"container"}
                      data-plasmic-override={overrides.container}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.container)}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__bEyaE
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__kGUaE
                          )}
                        >
                          {"\u00a1Hola Marco!"}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__pkqa3
                          )}
                        >
                          {
                            "A continuaci\u00f3n te presentamos el desempe\u00f1o de este mes."
                          }
                        </div>
                      </Stack__>
                      <AntdModal
                        data-plasmic-name={"registerModal"}
                        data-plasmic-override={overrides.registerModal}
                        className={classNames(
                          "__wab_instance",
                          sty.registerModal
                        )}
                        defaultStylesClassName={classNames(
                          projectcss.root_reset,
                          projectcss.plasmic_default_styles,
                          projectcss.plasmic_mixins,
                          projectcss.plasmic_tokens,
                          plasmic_antd_5_hostless_css.plasmic_tokens,
                          plasmic_plasmic_rich_components_css.plasmic_tokens,
                          plasmic_inprodi_design_system_css.plasmic_tokens
                        )}
                        footer={
                          <div
                            data-plasmic-name={"container2"}
                            data-plasmic-override={overrides.container2}
                            className={classNames(
                              projectcss.all,
                              sty.container2
                            )}
                          />
                        }
                        hideFooter={true}
                        modalContentClassName={classNames({
                          [sty["pcls_Q7E04EImQ7JJ"]]: true
                        })}
                        modalScopeClassName={sty["registerModal__modal"]}
                        okText={"Subir Im\u00e1genes"}
                        onOpenChange={generateStateOnChangeProp($state, [
                          "registerModal",
                          "open"
                        ])}
                        open={generateStateValueProp($state, [
                          "registerModal",
                          "open"
                        ])}
                        title={"Capturar Informaci\u00f3n"}
                        trigger={
                          <Button
                            block={false}
                            className={classNames(
                              "__wab_instance",
                              sty.button__czEsk
                            )}
                            danger={false}
                            ghost={false}
                            iconPosition={"start"}
                            isSubmit={false}
                            label={"Registrar Actividad"}
                            loading={false}
                            size={"large"}
                            variant={"primary"}
                            withIcon={false}
                          />
                        }
                        width={"700"}
                        wrapClassName={classNames({
                          [sty["pcls_Rp6HLiqawguh"]]: true
                        })}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__bJj2B
                          )}
                        >
                          <Form
                            data-plasmic-name={"statForm"}
                            data-plasmic-override={overrides.statForm}
                            className={classNames(
                              "__wab_instance",
                              sty.statForm
                            )}
                            content={
                              <React.Fragment>
                                <Stack__
                                  as={"div"}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox___2Kqzx
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__moMvy
                                    )}
                                  >
                                    {"Llamadas:"}
                                  </div>
                                  <Stack__
                                    as={"div"}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__j3Fv3
                                    )}
                                  >
                                    <FormField
                                      data-plasmic-name={"callsMade"}
                                      data-plasmic-override={
                                        overrides.callsMade
                                      }
                                      className={classNames(
                                        "__wab_instance",
                                        sty.callsMade
                                      )}
                                      error={generateStateValueProp($state, [
                                        "callsMade",
                                        "error"
                                      ])}
                                      input={
                                        <NumberInput
                                          data-plasmic-name={"callsMadeInput"}
                                          data-plasmic-override={
                                            overrides.callsMadeInput
                                          }
                                          className={classNames(
                                            "__wab_instance",
                                            sty.callsMadeInput
                                          )}
                                          defaultValue={""}
                                          disabled={false}
                                          leftIcon={
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.text__bLyBb
                                              )}
                                            >
                                              {"Drop Icon"}
                                            </div>
                                          }
                                          min={0}
                                          onChange={generateStateOnChangeProp(
                                            $state,
                                            ["callsMadeInput", "value"]
                                          )}
                                          placeholder={"0"}
                                          precision={0}
                                          showLeftIcon={false}
                                          size={"middle"}
                                          step={1}
                                          value={generateStateValueProp(
                                            $state,
                                            ["callsMadeInput", "value"]
                                          )}
                                          variant={"outlined"}
                                        />
                                      }
                                      label2={"Llamadas Realizadas"}
                                      onErrorChange={generateStateOnChangeProp(
                                        $state,
                                        ["callsMade", "error"]
                                      )}
                                    />

                                    <FormField
                                      data-plasmic-name={"callsAnswered"}
                                      data-plasmic-override={
                                        overrides.callsAnswered
                                      }
                                      className={classNames(
                                        "__wab_instance",
                                        sty.callsAnswered
                                      )}
                                      error={generateStateValueProp($state, [
                                        "callsAnswered",
                                        "error"
                                      ])}
                                      input={
                                        <NumberInput
                                          data-plasmic-name={
                                            "callsAnsweredInput"
                                          }
                                          data-plasmic-override={
                                            overrides.callsAnsweredInput
                                          }
                                          className={classNames(
                                            "__wab_instance",
                                            sty.callsAnsweredInput
                                          )}
                                          defaultValue={""}
                                          disabled={false}
                                          leftIcon={
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.text__iwvgv
                                              )}
                                            >
                                              {"Drop Icon"}
                                            </div>
                                          }
                                          min={0}
                                          onChange={generateStateOnChangeProp(
                                            $state,
                                            ["callsAnsweredInput", "value"]
                                          )}
                                          placeholder={"0"}
                                          precision={0}
                                          showLeftIcon={false}
                                          size={"middle"}
                                          step={1}
                                          value={generateStateValueProp(
                                            $state,
                                            ["callsAnsweredInput", "value"]
                                          )}
                                          variant={"outlined"}
                                        />
                                      }
                                      label2={"Llamadas Contestadas"}
                                      onErrorChange={generateStateOnChangeProp(
                                        $state,
                                        ["callsAnswered", "error"]
                                      )}
                                    />

                                    <FormField
                                      data-plasmic-name={"callsMoney"}
                                      data-plasmic-override={
                                        overrides.callsMoney
                                      }
                                      className={classNames(
                                        "__wab_instance",
                                        sty.callsMoney
                                      )}
                                      error={generateStateValueProp($state, [
                                        "callsMoney",
                                        "error"
                                      ])}
                                      input={
                                        <NumberInput
                                          data-plasmic-name={"callsMoneyInput"}
                                          data-plasmic-override={
                                            overrides.callsMoneyInput
                                          }
                                          addonBefore={"$"}
                                          className={classNames(
                                            "__wab_instance",
                                            sty.callsMoneyInput
                                          )}
                                          defaultValue={""}
                                          disabled={false}
                                          leftIcon={null}
                                          min={0}
                                          onChange={generateStateOnChangeProp(
                                            $state,
                                            ["callsMoneyInput", "value"]
                                          )}
                                          placeholder={"0.00"}
                                          precision={2}
                                          showLeftIcon={false}
                                          size={"middle"}
                                          step={1}
                                          value={generateStateValueProp(
                                            $state,
                                            ["callsMoneyInput", "value"]
                                          )}
                                          variant={"outlined"}
                                        />
                                      }
                                      label2={"Inversi\u00f3n Realizada"}
                                      onErrorChange={generateStateOnChangeProp(
                                        $state,
                                        ["callsMoney", "error"]
                                      )}
                                    />
                                  </Stack__>
                                </Stack__>
                                <Stack__
                                  as={"div"}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__psyHa
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__vrqXp
                                    )}
                                  >
                                    {"Cartas"}
                                  </div>
                                  <Stack__
                                    as={"div"}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__hsJ46
                                    )}
                                  >
                                    <FormField
                                      data-plasmic-name={"lettersMade"}
                                      data-plasmic-override={
                                        overrides.lettersMade
                                      }
                                      className={classNames(
                                        "__wab_instance",
                                        sty.lettersMade
                                      )}
                                      error={generateStateValueProp($state, [
                                        "lettersMade",
                                        "error"
                                      ])}
                                      input={
                                        <NumberInput
                                          data-plasmic-name={"letterMadeInput"}
                                          data-plasmic-override={
                                            overrides.letterMadeInput
                                          }
                                          className={classNames(
                                            "__wab_instance",
                                            sty.letterMadeInput
                                          )}
                                          defaultValue={""}
                                          disabled={false}
                                          leftIcon={
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.text__idwns
                                              )}
                                            >
                                              {"Drop Icon"}
                                            </div>
                                          }
                                          min={0}
                                          onChange={generateStateOnChangeProp(
                                            $state,
                                            ["letterMadeInput", "value"]
                                          )}
                                          placeholder={"0"}
                                          precision={0}
                                          showLeftIcon={false}
                                          size={"middle"}
                                          step={1}
                                          value={generateStateValueProp(
                                            $state,
                                            ["letterMadeInput", "value"]
                                          )}
                                          variant={"outlined"}
                                        />
                                      }
                                      label2={"Cartas Enviadas"}
                                      onErrorChange={generateStateOnChangeProp(
                                        $state,
                                        ["lettersMade", "error"]
                                      )}
                                    />

                                    <FormField
                                      data-plasmic-name={"lettersAnswered"}
                                      data-plasmic-override={
                                        overrides.lettersAnswered
                                      }
                                      className={classNames(
                                        "__wab_instance",
                                        sty.lettersAnswered
                                      )}
                                      error={generateStateValueProp($state, [
                                        "lettersAnswered",
                                        "error"
                                      ])}
                                      input={
                                        <NumberInput
                                          data-plasmic-name={
                                            "lettersAnsweredInput"
                                          }
                                          data-plasmic-override={
                                            overrides.lettersAnsweredInput
                                          }
                                          className={classNames(
                                            "__wab_instance",
                                            sty.lettersAnsweredInput
                                          )}
                                          defaultValue={""}
                                          disabled={false}
                                          leftIcon={
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.text__dcVj2
                                              )}
                                            >
                                              {"Drop Icon"}
                                            </div>
                                          }
                                          min={0}
                                          onChange={generateStateOnChangeProp(
                                            $state,
                                            ["lettersAnsweredInput", "value"]
                                          )}
                                          placeholder={"0"}
                                          precision={0}
                                          showLeftIcon={false}
                                          size={"middle"}
                                          step={1}
                                          value={generateStateValueProp(
                                            $state,
                                            ["lettersAnsweredInput", "value"]
                                          )}
                                          variant={"outlined"}
                                        />
                                      }
                                      label2={"Cartas Contestadas"}
                                      onErrorChange={generateStateOnChangeProp(
                                        $state,
                                        ["lettersAnswered", "error"]
                                      )}
                                    />

                                    <FormField
                                      data-plasmic-name={"lettersMoney"}
                                      data-plasmic-override={
                                        overrides.lettersMoney
                                      }
                                      className={classNames(
                                        "__wab_instance",
                                        sty.lettersMoney
                                      )}
                                      error={generateStateValueProp($state, [
                                        "lettersMoney",
                                        "error"
                                      ])}
                                      input={
                                        <NumberInput
                                          data-plasmic-name={
                                            "lettersMoneyInput"
                                          }
                                          data-plasmic-override={
                                            overrides.lettersMoneyInput
                                          }
                                          addonBefore={"$"}
                                          className={classNames(
                                            "__wab_instance",
                                            sty.lettersMoneyInput
                                          )}
                                          defaultValue={""}
                                          disabled={false}
                                          leftIcon={null}
                                          min={0}
                                          onChange={generateStateOnChangeProp(
                                            $state,
                                            ["lettersMoneyInput", "value"]
                                          )}
                                          placeholder={"0.00"}
                                          precision={2}
                                          showLeftIcon={false}
                                          size={"middle"}
                                          step={1}
                                          value={generateStateValueProp(
                                            $state,
                                            ["lettersMoneyInput", "value"]
                                          )}
                                          variant={"outlined"}
                                        />
                                      }
                                      label2={"Inversi\u00f3n Realizada"}
                                      onErrorChange={generateStateOnChangeProp(
                                        $state,
                                        ["lettersMoney", "error"]
                                      )}
                                    />
                                  </Stack__>
                                </Stack__>
                                <Stack__
                                  as={"div"}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__qa6Ns
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text___8R7Rv
                                    )}
                                  >
                                    {"Propiedades"}
                                  </div>
                                  <Stack__
                                    as={"div"}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox___6YBsQ
                                    )}
                                  >
                                    <FormField
                                      data-plasmic-name={"mlsProperties"}
                                      data-plasmic-override={
                                        overrides.mlsProperties
                                      }
                                      className={classNames(
                                        "__wab_instance",
                                        sty.mlsProperties
                                      )}
                                      error={generateStateValueProp($state, [
                                        "mlsProperties",
                                        "error"
                                      ])}
                                      input={
                                        <NumberInput
                                          data-plasmic-name={
                                            "mlsPropertiesInput"
                                          }
                                          data-plasmic-override={
                                            overrides.mlsPropertiesInput
                                          }
                                          className={classNames(
                                            "__wab_instance",
                                            sty.mlsPropertiesInput
                                          )}
                                          defaultValue={""}
                                          disabled={false}
                                          leftIcon={
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.text__pyOue
                                              )}
                                            >
                                              {"Drop Icon"}
                                            </div>
                                          }
                                          min={0}
                                          onChange={generateStateOnChangeProp(
                                            $state,
                                            ["mlsPropertiesInput", "value"]
                                          )}
                                          placeholder={"0"}
                                          precision={0}
                                          showLeftIcon={false}
                                          size={"middle"}
                                          step={1}
                                          value={generateStateValueProp(
                                            $state,
                                            ["mlsPropertiesInput", "value"]
                                          )}
                                          variant={"outlined"}
                                        />
                                      }
                                      label2={"Contratos por MLS"}
                                      onErrorChange={generateStateOnChangeProp(
                                        $state,
                                        ["mlsProperties", "error"]
                                      )}
                                    />

                                    <FormField
                                      data-plasmic-name={"lettersProperties"}
                                      data-plasmic-override={
                                        overrides.lettersProperties
                                      }
                                      className={classNames(
                                        "__wab_instance",
                                        sty.lettersProperties
                                      )}
                                      error={generateStateValueProp($state, [
                                        "lettersProperties",
                                        "error"
                                      ])}
                                      input={
                                        <NumberInput
                                          data-plasmic-name={
                                            "lettersPropertiesInput"
                                          }
                                          data-plasmic-override={
                                            overrides.lettersPropertiesInput
                                          }
                                          className={classNames(
                                            "__wab_instance",
                                            sty.lettersPropertiesInput
                                          )}
                                          defaultValue={""}
                                          disabled={false}
                                          leftIcon={
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.text___6Q9JF
                                              )}
                                            >
                                              {"Drop Icon"}
                                            </div>
                                          }
                                          min={0}
                                          onChange={generateStateOnChangeProp(
                                            $state,
                                            ["lettersPropertiesInput", "value"]
                                          )}
                                          placeholder={"0"}
                                          precision={0}
                                          showLeftIcon={false}
                                          size={"middle"}
                                          step={1}
                                          value={generateStateValueProp(
                                            $state,
                                            ["lettersPropertiesInput", "value"]
                                          )}
                                          variant={"outlined"}
                                        />
                                      }
                                      label2={"Contrato por Cartas"}
                                      onErrorChange={generateStateOnChangeProp(
                                        $state,
                                        ["lettersProperties", "error"]
                                      )}
                                    />

                                    <FormField
                                      data-plasmic-name={"callsProperties"}
                                      data-plasmic-override={
                                        overrides.callsProperties
                                      }
                                      className={classNames(
                                        "__wab_instance",
                                        sty.callsProperties
                                      )}
                                      error={generateStateValueProp($state, [
                                        "callsProperties",
                                        "error"
                                      ])}
                                      input={
                                        <NumberInput
                                          data-plasmic-name={
                                            "callsPropertiesInput"
                                          }
                                          data-plasmic-override={
                                            overrides.callsPropertiesInput
                                          }
                                          addonBefore={``}
                                          className={classNames(
                                            "__wab_instance",
                                            sty.callsPropertiesInput
                                          )}
                                          defaultValue={""}
                                          disabled={false}
                                          leftIcon={null}
                                          min={0}
                                          onChange={generateStateOnChangeProp(
                                            $state,
                                            ["callsPropertiesInput", "value"]
                                          )}
                                          placeholder={"0"}
                                          precision={0}
                                          showLeftIcon={false}
                                          size={"middle"}
                                          step={1}
                                          value={generateStateValueProp(
                                            $state,
                                            ["callsPropertiesInput", "value"]
                                          )}
                                          variant={"outlined"}
                                        />
                                      }
                                      label2={"Contrato por Llamadas"}
                                      onErrorChange={generateStateOnChangeProp(
                                        $state,
                                        ["callsProperties", "error"]
                                      )}
                                    />
                                  </Stack__>
                                </Stack__>
                                <Stack__
                                  as={"div"}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox___9TF
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__poekn
                                    )}
                                  >
                                    {"Ofertas"}
                                  </div>
                                  <Stack__
                                    as={"div"}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox___48X4
                                    )}
                                  >
                                    <FormField
                                      data-plasmic-name={"offersMadeMls"}
                                      data-plasmic-override={
                                        overrides.offersMadeMls
                                      }
                                      className={classNames(
                                        "__wab_instance",
                                        sty.offersMadeMls
                                      )}
                                      error={generateStateValueProp($state, [
                                        "offersMadeMls",
                                        "error"
                                      ])}
                                      input={
                                        <NumberInput
                                          data-plasmic-name={
                                            "offersMadeMlsInput"
                                          }
                                          data-plasmic-override={
                                            overrides.offersMadeMlsInput
                                          }
                                          className={classNames(
                                            "__wab_instance",
                                            sty.offersMadeMlsInput
                                          )}
                                          defaultValue={""}
                                          disabled={false}
                                          leftIcon={
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.text__aYEpr
                                              )}
                                            >
                                              {"Drop Icon"}
                                            </div>
                                          }
                                          min={0}
                                          onChange={generateStateOnChangeProp(
                                            $state,
                                            ["offersMadeMlsInput", "value"]
                                          )}
                                          placeholder={"0"}
                                          precision={0}
                                          showLeftIcon={false}
                                          size={"middle"}
                                          step={1}
                                          value={generateStateValueProp(
                                            $state,
                                            ["offersMadeMlsInput", "value"]
                                          )}
                                          variant={"outlined"}
                                        />
                                      }
                                      label2={"Ofertas Enviadas MLS"}
                                      onErrorChange={generateStateOnChangeProp(
                                        $state,
                                        ["offersMadeMls", "error"]
                                      )}
                                    />

                                    <FormField
                                      data-plasmic-name={"offersMadeLetters"}
                                      data-plasmic-override={
                                        overrides.offersMadeLetters
                                      }
                                      className={classNames(
                                        "__wab_instance",
                                        sty.offersMadeLetters
                                      )}
                                      error={generateStateValueProp($state, [
                                        "offersMadeLetters",
                                        "error"
                                      ])}
                                      input={
                                        <NumberInput
                                          data-plasmic-name={
                                            "offersMadeLettersInput"
                                          }
                                          data-plasmic-override={
                                            overrides.offersMadeLettersInput
                                          }
                                          className={classNames(
                                            "__wab_instance",
                                            sty.offersMadeLettersInput
                                          )}
                                          defaultValue={""}
                                          disabled={false}
                                          leftIcon={
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.text__mLAmr
                                              )}
                                            >
                                              {"Drop Icon"}
                                            </div>
                                          }
                                          min={0}
                                          onChange={generateStateOnChangeProp(
                                            $state,
                                            ["offersMadeLettersInput", "value"]
                                          )}
                                          placeholder={"0"}
                                          precision={0}
                                          showLeftIcon={false}
                                          size={"middle"}
                                          step={1}
                                          value={generateStateValueProp(
                                            $state,
                                            ["offersMadeLettersInput", "value"]
                                          )}
                                          variant={"outlined"}
                                        />
                                      }
                                      label2={"Ofertas Enviadas Cartas"}
                                      onErrorChange={generateStateOnChangeProp(
                                        $state,
                                        ["offersMadeLetters", "error"]
                                      )}
                                    />

                                    <FormField
                                      data-plasmic-name={"offersMadeCalls"}
                                      data-plasmic-override={
                                        overrides.offersMadeCalls
                                      }
                                      className={classNames(
                                        "__wab_instance",
                                        sty.offersMadeCalls
                                      )}
                                      error={generateStateValueProp($state, [
                                        "offersMadeCalls",
                                        "error"
                                      ])}
                                      input={
                                        <NumberInput
                                          data-plasmic-name={
                                            "offersMadeCallsInput"
                                          }
                                          data-plasmic-override={
                                            overrides.offersMadeCallsInput
                                          }
                                          className={classNames(
                                            "__wab_instance",
                                            sty.offersMadeCallsInput
                                          )}
                                          defaultValue={""}
                                          disabled={false}
                                          leftIcon={
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.text__uB24U
                                              )}
                                            >
                                              {"Drop Icon"}
                                            </div>
                                          }
                                          min={0}
                                          onChange={generateStateOnChangeProp(
                                            $state,
                                            ["offersMadeCallsInput", "value"]
                                          )}
                                          placeholder={"0"}
                                          precision={0}
                                          showLeftIcon={false}
                                          size={"middle"}
                                          step={1}
                                          value={generateStateValueProp(
                                            $state,
                                            ["offersMadeCallsInput", "value"]
                                          )}
                                          variant={"outlined"}
                                        />
                                      }
                                      label2={"Ofertas Enviadas Llamadas"}
                                      onErrorChange={generateStateOnChangeProp(
                                        $state,
                                        ["offersMadeCalls", "error"]
                                      )}
                                    />
                                  </Stack__>
                                  <Stack__
                                    as={"div"}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__zwJag
                                    )}
                                  >
                                    <FormField
                                      data-plasmic-name={"offersApprovedMls"}
                                      data-plasmic-override={
                                        overrides.offersApprovedMls
                                      }
                                      className={classNames(
                                        "__wab_instance",
                                        sty.offersApprovedMls
                                      )}
                                      error={generateStateValueProp($state, [
                                        "offersApprovedMls",
                                        "error"
                                      ])}
                                      input={
                                        <NumberInput
                                          data-plasmic-name={
                                            "offersApprovedMlsInput"
                                          }
                                          data-plasmic-override={
                                            overrides.offersApprovedMlsInput
                                          }
                                          className={classNames(
                                            "__wab_instance",
                                            sty.offersApprovedMlsInput
                                          )}
                                          defaultValue={""}
                                          disabled={false}
                                          leftIcon={
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.text__auOfG
                                              )}
                                            >
                                              {"Drop Icon"}
                                            </div>
                                          }
                                          min={0}
                                          onChange={generateStateOnChangeProp(
                                            $state,
                                            ["offersApprovedMlsInput", "value"]
                                          )}
                                          placeholder={"0"}
                                          precision={0}
                                          showLeftIcon={false}
                                          size={"middle"}
                                          step={1}
                                          value={generateStateValueProp(
                                            $state,
                                            ["offersApprovedMlsInput", "value"]
                                          )}
                                          variant={"outlined"}
                                        />
                                      }
                                      label2={"Ofertas Aceptadas MLS"}
                                      onErrorChange={generateStateOnChangeProp(
                                        $state,
                                        ["offersApprovedMls", "error"]
                                      )}
                                    />

                                    <FormField
                                      data-plasmic-name={
                                        "offersApprovedLetters"
                                      }
                                      data-plasmic-override={
                                        overrides.offersApprovedLetters
                                      }
                                      className={classNames(
                                        "__wab_instance",
                                        sty.offersApprovedLetters
                                      )}
                                      error={generateStateValueProp($state, [
                                        "offersApprovedLetters",
                                        "error"
                                      ])}
                                      input={
                                        <NumberInput
                                          data-plasmic-name={
                                            "offersApprovedLettersInput"
                                          }
                                          data-plasmic-override={
                                            overrides.offersApprovedLettersInput
                                          }
                                          className={classNames(
                                            "__wab_instance",
                                            sty.offersApprovedLettersInput
                                          )}
                                          defaultValue={""}
                                          disabled={false}
                                          leftIcon={
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.text__pRylj
                                              )}
                                            >
                                              {"Drop Icon"}
                                            </div>
                                          }
                                          min={0}
                                          onChange={generateStateOnChangeProp(
                                            $state,
                                            [
                                              "offersApprovedLettersInput",
                                              "value"
                                            ]
                                          )}
                                          placeholder={"0"}
                                          precision={0}
                                          showLeftIcon={false}
                                          size={"middle"}
                                          step={1}
                                          value={generateStateValueProp(
                                            $state,
                                            [
                                              "offersApprovedLettersInput",
                                              "value"
                                            ]
                                          )}
                                          variant={"outlined"}
                                        />
                                      }
                                      label2={"Ofertas Aceptadas Cartas"}
                                      onErrorChange={generateStateOnChangeProp(
                                        $state,
                                        ["offersApprovedLetters", "error"]
                                      )}
                                    />

                                    <FormField
                                      data-plasmic-name={"offersApprovedCalls"}
                                      data-plasmic-override={
                                        overrides.offersApprovedCalls
                                      }
                                      className={classNames(
                                        "__wab_instance",
                                        sty.offersApprovedCalls
                                      )}
                                      error={generateStateValueProp($state, [
                                        "offersApprovedCalls",
                                        "error"
                                      ])}
                                      input={
                                        <NumberInput
                                          data-plasmic-name={
                                            "offersApprovedCallsInput"
                                          }
                                          data-plasmic-override={
                                            overrides.offersApprovedCallsInput
                                          }
                                          className={classNames(
                                            "__wab_instance",
                                            sty.offersApprovedCallsInput
                                          )}
                                          defaultValue={""}
                                          disabled={false}
                                          leftIcon={
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.text__mNhLi
                                              )}
                                            >
                                              {"Drop Icon"}
                                            </div>
                                          }
                                          min={0}
                                          onChange={generateStateOnChangeProp(
                                            $state,
                                            [
                                              "offersApprovedCallsInput",
                                              "value"
                                            ]
                                          )}
                                          placeholder={"0"}
                                          precision={0}
                                          showLeftIcon={false}
                                          size={"middle"}
                                          step={1}
                                          value={generateStateValueProp(
                                            $state,
                                            [
                                              "offersApprovedCallsInput",
                                              "value"
                                            ]
                                          )}
                                          variant={"outlined"}
                                        />
                                      }
                                      label2={"Ofertas Aceptadas Llamadas"}
                                      onErrorChange={generateStateOnChangeProp(
                                        $state,
                                        ["offersApprovedCalls", "error"]
                                      )}
                                    />
                                  </Stack__>
                                  <FormField
                                    data-plasmic-name={"deals"}
                                    data-plasmic-override={overrides.deals}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.deals
                                    )}
                                    error={generateStateValueProp($state, [
                                      "deals",
                                      "error"
                                    ])}
                                    input={
                                      <NumberInput
                                        data-plasmic-name={"dealsInput"}
                                        data-plasmic-override={
                                          overrides.dealsInput
                                        }
                                        className={classNames(
                                          "__wab_instance",
                                          sty.dealsInput
                                        )}
                                        defaultValue={""}
                                        disabled={false}
                                        leftIcon={
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__rfC5A
                                            )}
                                          >
                                            {"Drop Icon"}
                                          </div>
                                        }
                                        min={0}
                                        onChange={generateStateOnChangeProp(
                                          $state,
                                          ["dealsInput", "value"]
                                        )}
                                        placeholder={"0"}
                                        precision={0}
                                        showLeftIcon={false}
                                        size={"middle"}
                                        step={1}
                                        value={generateStateValueProp($state, [
                                          "dealsInput",
                                          "value"
                                        ])}
                                        variant={"outlined"}
                                      />
                                    }
                                    label2={"Tratos Realizados"}
                                    onErrorChange={generateStateOnChangeProp(
                                      $state,
                                      ["deals", "error"]
                                    )}
                                  />
                                </Stack__>
                                <Button
                                  block={true}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.button__n13Dm
                                  )}
                                  danger={false}
                                  ghost={false}
                                  iconPosition={"start"}
                                  isSubmit={true}
                                  label={"Subir Informaci\u00f3n"}
                                  loading={(() => {
                                    try {
                                      return $state.query.register;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return false;
                                      }
                                      throw e;
                                    }
                                  })()}
                                  onClick={async () => {
                                    const $steps = {};
                                  }}
                                  size={"middle"}
                                  variant={"primary"}
                                  withIcon={false}
                                />
                              </React.Fragment>
                            }
                            errors={generateStateValueProp($state, [
                              "statForm",
                              "errors"
                            ])}
                            onErrorsChange={generateStateOnChangeProp($state, [
                              "statForm",
                              "errors"
                            ])}
                            onSubmit={async () => {
                              const $steps = {};

                              $steps["setLoading"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["query", "register"]
                                      },
                                      operation: 0,
                                      value: true
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["setLoading"] != null &&
                                typeof $steps["setLoading"] === "object" &&
                                typeof $steps["setLoading"].then === "function"
                              ) {
                                $steps["setLoading"] = await $steps[
                                  "setLoading"
                                ];
                              }

                              $steps["registerRequest"] = true
                                ? (() => {
                                    const actionArgs = {
                                      dataOp: {
                                        sourceId: "9SbcJmsXuR3ob6ZWwKJZY9",
                                        opId: "fd96ee89-a39a-4ebd-813f-9cf2c52ccf20",
                                        userArgs: {
                                          headers: [`Bearer ${$ctx.token}`],
                                          body: [
                                            {
                                              callsMade:
                                                $state.callsMadeInput.value ??
                                                0,
                                              callsAnswered:
                                                $state.callsAnsweredInput
                                                  .value ?? 0,
                                              callsInvestment:
                                                $state.callsMoneyInput.value ??
                                                0,
                                              lettersMade:
                                                $state.letterMadeInput.value ??
                                                0,
                                              lettersAnswered:
                                                $state.lettersAnsweredInput
                                                  .value ?? 0,
                                              lettersInvestment:
                                                $state.lettersMoneyInput
                                                  .value ?? 0,
                                              mlsProperties:
                                                $state.mlsPropertiesInput
                                                  .value ?? 0,
                                              callsProperties:
                                                $state.callsPropertiesInput
                                                  .value ?? 0,
                                              lettersProperties:
                                                $state.lettersPropertiesInput
                                                  .value ?? 0,
                                              mlsOffersMade:
                                                $state.offersMadeMlsInput
                                                  .value ?? 0,
                                              lettersOffersMade:
                                                $state.offersMadeLettersInput
                                                  .value ?? 0,
                                              callsOffersMade:
                                                $state.offersMadeCallsInput
                                                  .value ?? 0,
                                              mlsOffersApproved:
                                                $state.offersApprovedMlsInput
                                                  .value ?? 0,
                                              lettersOffersApproved:
                                                $state
                                                  .offersApprovedLettersInput
                                                  .value ?? 0,
                                              callsOffersApproved:
                                                $state.offersApprovedCallsInput
                                                  .value ?? 0,
                                              deals:
                                                $state.dealsInput.value ?? 0
                                            }
                                          ]
                                        },
                                        cacheKey: null,
                                        invalidatedKeys: [],
                                        roleId: null
                                      }
                                    };
                                    return (async ({
                                      dataOp,
                                      continueOnError
                                    }) => {
                                      try {
                                        const response =
                                          await executePlasmicDataOp(dataOp, {
                                            userAuthToken:
                                              dataSourcesCtx?.userAuthToken,
                                            user: dataSourcesCtx?.user
                                          });
                                        await plasmicInvalidate(
                                          dataOp.invalidatedKeys
                                        );
                                        return response;
                                      } catch (e) {
                                        if (!continueOnError) {
                                          throw e;
                                        }
                                        return e;
                                      }
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["registerRequest"] != null &&
                                typeof $steps["registerRequest"] === "object" &&
                                typeof $steps["registerRequest"].then ===
                                  "function"
                              ) {
                                $steps["registerRequest"] = await $steps[
                                  "registerRequest"
                                ];
                              }

                              $steps["handleSuccess"] = true
                                ? (() => {
                                    const actionArgs = {
                                      customFunction: async () => {
                                        return (() => {
                                          $state.registerModal.open = false;
                                          $state.query.register = false;
                                          $state.dealsInput.value = null;
                                          $state.callsMadeInput.value = null;
                                          $state.callsMoneyInput.value = null;
                                          $state.letterMadeInput.value = null;
                                          $state.lettersMoneyInput.value = null;
                                          $state.callsAnsweredInput.value =
                                            null;
                                          $state.mlsPropertiesInput.value =
                                            null;
                                          $state.offersMadeMlsInput.value =
                                            null;
                                          $state.callsPropertiesInput.value =
                                            null;
                                          $state.lettersAnsweredInput.value =
                                            null;
                                          $state.offersMadeCallsInput.value =
                                            null;
                                          $state.lettersPropertiesInput.value =
                                            null;
                                          $state.offersMadeLettersInput.value =
                                            null;
                                          $state.offersApprovedMlsInput.value =
                                            null;
                                          $state.offersApprovedLettersInput.value =
                                            null;
                                          $state.offersApprovedCallsInput.value =
                                            null;
                                          return $$.showNotification(
                                            "Se ha registrado la información",
                                            { type: "success" }
                                          );
                                        })();
                                      }
                                    };
                                    return (({ customFunction }) => {
                                      return customFunction();
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["handleSuccess"] != null &&
                                typeof $steps["handleSuccess"] === "object" &&
                                typeof $steps["handleSuccess"].then ===
                                  "function"
                              ) {
                                $steps["handleSuccess"] = await $steps[
                                  "handleSuccess"
                                ];
                              }

                              $steps["reQuery"] = true
                                ? (() => {
                                    const actionArgs = {
                                      queryInvalidation: [
                                        "b49a65a0-71aa-407c-8c4e-05cd7f881624"
                                      ]
                                    };
                                    return (async ({ queryInvalidation }) => {
                                      if (!queryInvalidation) {
                                        return;
                                      }
                                      await plasmicInvalidate(
                                        queryInvalidation
                                      );
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["reQuery"] != null &&
                                typeof $steps["reQuery"] === "object" &&
                                typeof $steps["reQuery"].then === "function"
                              ) {
                                $steps["reQuery"] = await $steps["reQuery"];
                              }
                            }}
                            onValidationChange={generateStateOnChangeProp(
                              $state,
                              ["statForm", "validation"]
                            )}
                            onValuesChange={generateStateOnChangeProp($state, [
                              "statForm",
                              "values"
                            ])}
                            validation={generateStateValueProp($state, [
                              "statForm",
                              "validation"
                            ])}
                            values={generateStateValueProp($state, [
                              "statForm",
                              "values"
                            ])}
                          />
                        </div>
                      </AntdModal>
                    </Stack__>
                    <div
                      data-plasmic-name={"stats"}
                      data-plasmic-override={overrides.stats}
                      className={classNames(projectcss.all, sty.stats)}
                    >
                      <Statistic
                        className={classNames(
                          "__wab_instance",
                          sty.statistic___3Au2
                        )}
                        icon2={
                          <PhoneOutgoingDuotonesvgIcon
                            data-plasmic-name={"icon"}
                            data-plasmic-override={overrides.icon}
                            className={classNames(projectcss.all, sty.icon)}
                            role={"img"}
                          />
                        }
                        title={"Llamadas Realizadas"}
                        value={(() => {
                          try {
                            return $queries.getStats.data.response.calls_made;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return 0;
                            }
                            throw e;
                          }
                        })()}
                      />

                      <Statistic
                        className={classNames(
                          "__wab_instance",
                          sty.statistic__liqKq
                        )}
                        icon2={
                          <EnvelopeOpenDuotonesvgIcon
                            data-plasmic-name={"icon2"}
                            data-plasmic-override={overrides.icon2}
                            className={classNames(projectcss.all, sty.icon2)}
                            role={"img"}
                          />
                        }
                        title={"Cartas Enviadas"}
                        value={(() => {
                          try {
                            return $queries.getStats.data.response.letters_made;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return 0;
                            }
                            throw e;
                          }
                        })()}
                      />

                      <Statistic
                        className={classNames(
                          "__wab_instance",
                          sty.statistic__t8FLe
                        )}
                        icon2={
                          <ScrollDuotonesvgIcon
                            data-plasmic-name={"icon3"}
                            data-plasmic-override={overrides.icon3}
                            className={classNames(projectcss.all, sty.icon3)}
                            role={"img"}
                          />
                        }
                        title={"Ofertas Enviadas"}
                        value={(() => {
                          try {
                            return $queries.getStats.data.response.offers_made;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return 0;
                            }
                            throw e;
                          }
                        })()}
                      />

                      <Statistic
                        className={classNames(
                          "__wab_instance",
                          sty.statistic__rBtff,
                          {
                            [sty.statisticglobal_colorScheme_dark__rBtffouga]:
                              hasVariant(globalVariants, "colorScheme", "dark")
                          }
                        )}
                        icon2={
                          <HandshakeDuotonesvgIcon
                            data-plasmic-name={"icon4"}
                            data-plasmic-override={overrides.icon4}
                            className={classNames(projectcss.all, sty.icon4)}
                            role={"img"}
                          />
                        }
                        title={"Tratos Realizados"}
                        value={(() => {
                          try {
                            return $queries.getStats.data.response.deals;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return 0;
                            }
                            throw e;
                          }
                        })()}
                      />

                      <Statistic
                        className={classNames(
                          "__wab_instance",
                          sty.statistic__mibT
                        )}
                        icon2={
                          <PhoneCallDuotonesvgIcon
                            data-plasmic-name={"icon6"}
                            data-plasmic-override={overrides.icon6}
                            className={classNames(projectcss.all, sty.icon6)}
                            role={"img"}
                          />
                        }
                        title={"Llamadas Contestadas"}
                        value={(() => {
                          try {
                            return $queries.getStats.data.response
                              .calls_answered;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return 0;
                            }
                            throw e;
                          }
                        })()}
                      />

                      <Statistic
                        className={classNames(
                          "__wab_instance",
                          sty.statistic__zcCtz
                        )}
                        icon2={
                          <MailboxDuotonesvgIcon
                            data-plasmic-name={"icon7"}
                            data-plasmic-override={overrides.icon7}
                            className={classNames(projectcss.all, sty.icon7)}
                            role={"img"}
                          />
                        }
                        title={"Cartas Contestadas"}
                        value={(() => {
                          try {
                            return $queries.getStats.data.response
                              .letters_answered;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return 0;
                            }
                            throw e;
                          }
                        })()}
                      />

                      <Statistic
                        className={classNames(
                          "__wab_instance",
                          sty.statistic__uxi8B
                        )}
                        icon2={
                          <CheckCircleDuotonesvgIcon
                            data-plasmic-name={"icon5"}
                            data-plasmic-override={overrides.icon5}
                            className={classNames(projectcss.all, sty.icon5)}
                            role={"img"}
                          />
                        }
                        title={"Ofertas Aceptadas"}
                        value={(() => {
                          try {
                            return $queries.getStats.data.response
                              .offers_approved;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return 0;
                            }
                            throw e;
                          }
                        })()}
                      />

                      <Statistic
                        className={classNames(
                          "__wab_instance",
                          sty.statistic___4YZdn
                        )}
                        icon2={
                          <MoneyWavyDuotonesvgIcon
                            data-plasmic-name={"icon8"}
                            data-plasmic-override={overrides.icon8}
                            className={classNames(projectcss.all, sty.icon8)}
                            role={"img"}
                          />
                        }
                        prefix={"$"}
                        suffix={"USD"}
                        title={"Capital Total Invertido"}
                        value={(() => {
                          try {
                            return $queries.getStats.data.response.investment;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return 0;
                            }
                            throw e;
                          }
                        })()}
                      />
                    </div>
                    <div
                      data-plasmic-name={"charts"}
                      data-plasmic-override={overrides.charts}
                      className={classNames(projectcss.all, sty.charts)}
                    >
                      <Card
                        className={classNames(
                          "__wab_instance",
                          sty.card__ocoeJ
                        )}
                        content={
                          <SimpleChart
                            className={classNames(
                              "__wab_instance",
                              sty.chart__lftku
                            )}
                            data={[
                              {
                                contract: "MLS",
                                Propiedades:
                                  $queries.getStats.data?.response
                                    ?.mls_properties || 0
                              },
                              {
                                contract: "Cartas",
                                Propiedades:
                                  $queries.getStats.data?.response
                                    ?.letters_properties || 0
                              },
                              {
                                contract: "Llamadas",
                                Propiedades:
                                  $queries.getStats.data?.response
                                    ?.calls_properties || 0
                              }
                            ]}
                            stacked={false}
                            type={"bar"}
                          />
                        }
                        description={
                          "Comparaci\u00f3n de propiedades por tipo de contrato"
                        }
                        loading={false}
                        padding={14}
                        shadow={"sm"}
                        showTitle={true}
                        title={"Tipo de Contrato"}
                        width={"100%"}
                      />

                      <Card
                        className={classNames("__wab_instance", sty.card__u8OL)}
                        content={
                          <SimpleChart
                            className={classNames(
                              "__wab_instance",
                              sty.chart__wQZiA
                            )}
                            data={[
                              {
                                type: "Cartas",
                                Inversión:
                                  $queries.getStats.data?.response
                                    ?.letters_investment || 0
                              },
                              {
                                type: "Llamadas",
                                Inversión:
                                  $queries.getStats.data?.response
                                    ?.calls_investment || 0
                              }
                            ]}
                            direction={"horizontal"}
                            type={"bar"}
                          />
                        }
                        description={
                          "Comparaci\u00f3n de inversi\u00f3n por medio de contacto"
                        }
                        loading={false}
                        padding={14}
                        shadow={"sm"}
                        showTitle={true}
                        title={"Capital Invertido"}
                        width={"100%"}
                      />

                      <Card
                        className={classNames(
                          "__wab_instance",
                          sty.card___0Ujl8
                        )}
                        content={
                          <SimpleChart
                            className={classNames(
                              "__wab_instance",
                              sty.chart___5HJcb
                            )}
                            data={(() => {
                              const lettersInvestment =
                                $queries.getStats.data?.response
                                  ?.letters_investment || 0;
                              const lettersMade =
                                $queries.getStats.data?.response
                                  ?.letters_made || 0;
                              const callsInvestment =
                                $queries.getStats.data?.response
                                  ?.calls_investment || 0;
                              const callsMade =
                                $queries.getStats.data?.response?.calls_made ||
                                0;
                              return [
                                {
                                  type: "Cartas",
                                  Costo:
                                    lettersMade === 0
                                      ? 0
                                      : (
                                          lettersInvestment / lettersMade
                                        ).toFixed(2)
                                },
                                {
                                  type: "Llamadas",
                                  Costo:
                                    callsMade === 0
                                      ? 0
                                      : (callsInvestment / callsMade).toFixed(2)
                                }
                              ];
                            })()}
                          />
                        }
                        description={
                          "Comparaci\u00f3n de costo por medio de llamada"
                        }
                        loading={false}
                        padding={14}
                        shadow={"sm"}
                        showTitle={true}
                        title={"Costo por Lead"}
                        width={"100%"}
                      />
                    </div>
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__zpjY5)}
                    >
                      <Card
                        className={classNames(
                          "__wab_instance",
                          sty.card___3VUd1
                        )}
                        content={
                          <SimpleChart
                            className={classNames(
                              "__wab_instance",
                              sty.chart__ukpLq
                            )}
                            data={[
                              {
                                contract: "MLS",
                                Ofertas:
                                  $queries.getStats.data?.response
                                    ?.mls_offers_made || 0
                              },
                              {
                                contract: "Cartas",
                                Ofertas:
                                  $queries.getStats.data?.response
                                    ?.letters_offers_made || 0
                              },
                              {
                                contract: "Llamadas",
                                Ofertas:
                                  $queries.getStats.data?.response
                                    ?.calls_offers_made || 0
                              }
                            ]}
                            direction={"horizontal"}
                            stacked={false}
                            type={"bar"}
                          />
                        }
                        description={
                          "Comparaci\u00f3n de ofertas enviadas por medio de contacto"
                        }
                        loading={false}
                        padding={14}
                        shadow={"sm"}
                        showTitle={true}
                        title={"Ofertas Enviadas"}
                        width={"100%"}
                      />

                      <Card
                        className={classNames(
                          "__wab_instance",
                          sty.card__vS9Q0
                        )}
                        content={
                          <SimpleChart
                            className={classNames(
                              "__wab_instance",
                              sty.chart__xj8Sa
                            )}
                            data={[
                              {
                                contract: "MLS",
                                Ofertas:
                                  $queries.getStats.data?.response
                                    ?.mls_offers_approved || 0
                              },
                              {
                                contract: "Cartas",
                                Ofertas:
                                  $queries.getStats.data?.response
                                    ?.letters_offers_approved || 0
                              },
                              {
                                contract: "Llamadas",
                                Ofertas:
                                  $queries.getStats.data?.response
                                    ?.calls_offers_approved || 0
                              }
                            ]}
                            direction={"horizontal"}
                            stacked={false}
                          />
                        }
                        description={
                          "Comparaci\u00f3n de ofertas aceptadas por medio de contacto"
                        }
                        loading={false}
                        padding={14}
                        shadow={"sm"}
                        showTitle={true}
                        title={"Ofertas Aceptadas"}
                        width={"100%"}
                      />
                    </Stack__>
                  </React.Fragment>
                )}
              </DataCtxReader__>
            }
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  mainSection: [
    "mainSection",
    "appShell",
    "container",
    "registerModal",
    "statForm",
    "callsMade",
    "callsMadeInput",
    "callsAnswered",
    "callsAnsweredInput",
    "callsMoney",
    "callsMoneyInput",
    "lettersMade",
    "letterMadeInput",
    "lettersAnswered",
    "lettersAnsweredInput",
    "lettersMoney",
    "lettersMoneyInput",
    "mlsProperties",
    "mlsPropertiesInput",
    "lettersProperties",
    "lettersPropertiesInput",
    "callsProperties",
    "callsPropertiesInput",
    "offersMadeMls",
    "offersMadeMlsInput",
    "offersMadeLetters",
    "offersMadeLettersInput",
    "offersMadeCalls",
    "offersMadeCallsInput",
    "offersApprovedMls",
    "offersApprovedMlsInput",
    "offersApprovedLetters",
    "offersApprovedLettersInput",
    "offersApprovedCalls",
    "offersApprovedCallsInput",
    "deals",
    "dealsInput",
    "container2",
    "stats",
    "icon",
    "icon2",
    "icon3",
    "icon4",
    "icon6",
    "icon7",
    "icon5",
    "icon8",
    "charts"
  ],
  appShell: [
    "appShell",
    "container",
    "registerModal",
    "statForm",
    "callsMade",
    "callsMadeInput",
    "callsAnswered",
    "callsAnsweredInput",
    "callsMoney",
    "callsMoneyInput",
    "lettersMade",
    "letterMadeInput",
    "lettersAnswered",
    "lettersAnsweredInput",
    "lettersMoney",
    "lettersMoneyInput",
    "mlsProperties",
    "mlsPropertiesInput",
    "lettersProperties",
    "lettersPropertiesInput",
    "callsProperties",
    "callsPropertiesInput",
    "offersMadeMls",
    "offersMadeMlsInput",
    "offersMadeLetters",
    "offersMadeLettersInput",
    "offersMadeCalls",
    "offersMadeCallsInput",
    "offersApprovedMls",
    "offersApprovedMlsInput",
    "offersApprovedLetters",
    "offersApprovedLettersInput",
    "offersApprovedCalls",
    "offersApprovedCallsInput",
    "deals",
    "dealsInput",
    "container2",
    "stats",
    "icon",
    "icon2",
    "icon3",
    "icon4",
    "icon6",
    "icon7",
    "icon5",
    "icon8",
    "charts"
  ],
  container: [
    "container",
    "registerModal",
    "statForm",
    "callsMade",
    "callsMadeInput",
    "callsAnswered",
    "callsAnsweredInput",
    "callsMoney",
    "callsMoneyInput",
    "lettersMade",
    "letterMadeInput",
    "lettersAnswered",
    "lettersAnsweredInput",
    "lettersMoney",
    "lettersMoneyInput",
    "mlsProperties",
    "mlsPropertiesInput",
    "lettersProperties",
    "lettersPropertiesInput",
    "callsProperties",
    "callsPropertiesInput",
    "offersMadeMls",
    "offersMadeMlsInput",
    "offersMadeLetters",
    "offersMadeLettersInput",
    "offersMadeCalls",
    "offersMadeCallsInput",
    "offersApprovedMls",
    "offersApprovedMlsInput",
    "offersApprovedLetters",
    "offersApprovedLettersInput",
    "offersApprovedCalls",
    "offersApprovedCallsInput",
    "deals",
    "dealsInput",
    "container2"
  ],
  registerModal: [
    "registerModal",
    "statForm",
    "callsMade",
    "callsMadeInput",
    "callsAnswered",
    "callsAnsweredInput",
    "callsMoney",
    "callsMoneyInput",
    "lettersMade",
    "letterMadeInput",
    "lettersAnswered",
    "lettersAnsweredInput",
    "lettersMoney",
    "lettersMoneyInput",
    "mlsProperties",
    "mlsPropertiesInput",
    "lettersProperties",
    "lettersPropertiesInput",
    "callsProperties",
    "callsPropertiesInput",
    "offersMadeMls",
    "offersMadeMlsInput",
    "offersMadeLetters",
    "offersMadeLettersInput",
    "offersMadeCalls",
    "offersMadeCallsInput",
    "offersApprovedMls",
    "offersApprovedMlsInput",
    "offersApprovedLetters",
    "offersApprovedLettersInput",
    "offersApprovedCalls",
    "offersApprovedCallsInput",
    "deals",
    "dealsInput",
    "container2"
  ],
  statForm: [
    "statForm",
    "callsMade",
    "callsMadeInput",
    "callsAnswered",
    "callsAnsweredInput",
    "callsMoney",
    "callsMoneyInput",
    "lettersMade",
    "letterMadeInput",
    "lettersAnswered",
    "lettersAnsweredInput",
    "lettersMoney",
    "lettersMoneyInput",
    "mlsProperties",
    "mlsPropertiesInput",
    "lettersProperties",
    "lettersPropertiesInput",
    "callsProperties",
    "callsPropertiesInput",
    "offersMadeMls",
    "offersMadeMlsInput",
    "offersMadeLetters",
    "offersMadeLettersInput",
    "offersMadeCalls",
    "offersMadeCallsInput",
    "offersApprovedMls",
    "offersApprovedMlsInput",
    "offersApprovedLetters",
    "offersApprovedLettersInput",
    "offersApprovedCalls",
    "offersApprovedCallsInput",
    "deals",
    "dealsInput"
  ],
  callsMade: ["callsMade", "callsMadeInput"],
  callsMadeInput: ["callsMadeInput"],
  callsAnswered: ["callsAnswered", "callsAnsweredInput"],
  callsAnsweredInput: ["callsAnsweredInput"],
  callsMoney: ["callsMoney", "callsMoneyInput"],
  callsMoneyInput: ["callsMoneyInput"],
  lettersMade: ["lettersMade", "letterMadeInput"],
  letterMadeInput: ["letterMadeInput"],
  lettersAnswered: ["lettersAnswered", "lettersAnsweredInput"],
  lettersAnsweredInput: ["lettersAnsweredInput"],
  lettersMoney: ["lettersMoney", "lettersMoneyInput"],
  lettersMoneyInput: ["lettersMoneyInput"],
  mlsProperties: ["mlsProperties", "mlsPropertiesInput"],
  mlsPropertiesInput: ["mlsPropertiesInput"],
  lettersProperties: ["lettersProperties", "lettersPropertiesInput"],
  lettersPropertiesInput: ["lettersPropertiesInput"],
  callsProperties: ["callsProperties", "callsPropertiesInput"],
  callsPropertiesInput: ["callsPropertiesInput"],
  offersMadeMls: ["offersMadeMls", "offersMadeMlsInput"],
  offersMadeMlsInput: ["offersMadeMlsInput"],
  offersMadeLetters: ["offersMadeLetters", "offersMadeLettersInput"],
  offersMadeLettersInput: ["offersMadeLettersInput"],
  offersMadeCalls: ["offersMadeCalls", "offersMadeCallsInput"],
  offersMadeCallsInput: ["offersMadeCallsInput"],
  offersApprovedMls: ["offersApprovedMls", "offersApprovedMlsInput"],
  offersApprovedMlsInput: ["offersApprovedMlsInput"],
  offersApprovedLetters: [
    "offersApprovedLetters",
    "offersApprovedLettersInput"
  ],
  offersApprovedLettersInput: ["offersApprovedLettersInput"],
  offersApprovedCalls: ["offersApprovedCalls", "offersApprovedCallsInput"],
  offersApprovedCallsInput: ["offersApprovedCallsInput"],
  deals: ["deals", "dealsInput"],
  dealsInput: ["dealsInput"],
  container2: ["container2"],
  stats: [
    "stats",
    "icon",
    "icon2",
    "icon3",
    "icon4",
    "icon6",
    "icon7",
    "icon5",
    "icon8"
  ],
  icon: ["icon"],
  icon2: ["icon2"],
  icon3: ["icon3"],
  icon4: ["icon4"],
  icon6: ["icon6"],
  icon7: ["icon7"],
  icon5: ["icon5"],
  icon8: ["icon8"],
  charts: ["charts"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  mainSection: "div";
  appShell: typeof AppShell;
  container: "div";
  registerModal: typeof AntdModal;
  statForm: typeof Form;
  callsMade: typeof FormField;
  callsMadeInput: typeof NumberInput;
  callsAnswered: typeof FormField;
  callsAnsweredInput: typeof NumberInput;
  callsMoney: typeof FormField;
  callsMoneyInput: typeof NumberInput;
  lettersMade: typeof FormField;
  letterMadeInput: typeof NumberInput;
  lettersAnswered: typeof FormField;
  lettersAnsweredInput: typeof NumberInput;
  lettersMoney: typeof FormField;
  lettersMoneyInput: typeof NumberInput;
  mlsProperties: typeof FormField;
  mlsPropertiesInput: typeof NumberInput;
  lettersProperties: typeof FormField;
  lettersPropertiesInput: typeof NumberInput;
  callsProperties: typeof FormField;
  callsPropertiesInput: typeof NumberInput;
  offersMadeMls: typeof FormField;
  offersMadeMlsInput: typeof NumberInput;
  offersMadeLetters: typeof FormField;
  offersMadeLettersInput: typeof NumberInput;
  offersMadeCalls: typeof FormField;
  offersMadeCallsInput: typeof NumberInput;
  offersApprovedMls: typeof FormField;
  offersApprovedMlsInput: typeof NumberInput;
  offersApprovedLetters: typeof FormField;
  offersApprovedLettersInput: typeof NumberInput;
  offersApprovedCalls: typeof FormField;
  offersApprovedCallsInput: typeof NumberInput;
  deals: typeof FormField;
  dealsInput: typeof NumberInput;
  container2: "div";
  stats: "div";
  icon: "svg";
  icon2: "svg";
  icon3: "svg";
  icon4: "svg";
  icon6: "svg";
  icon7: "svg";
  icon5: "svg";
  icon8: "svg";
  charts: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDashboard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDashboard__VariantsArgs;
    args?: PlasmicDashboard__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicDashboard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicDashboard__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicDashboard__ArgProps,
          internalVariantPropNames: PlasmicDashboard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicDashboard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "mainSection") {
    func.displayName = "PlasmicDashboard";
  } else {
    func.displayName = `PlasmicDashboard.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const PageGuard: React.FC<P> = props => (
    <PlasmicPageGuard__
      minRole={null}
      appId={"okr6zFws8g9BFEw4Fons9x"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={true}
    >
      <WrappedComponent {...props} />
    </PlasmicPageGuard__>
  );

  return PageGuard;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "okr6zFws8g9BFEw4Fons9x"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicDashboard = Object.assign(
  // Top-level PlasmicDashboard renders the root element
  withUsePlasmicAuth(withPlasmicPageGuard(makeNodeComponent("mainSection"))),
  {
    // Helper components rendering sub-elements
    appShell: makeNodeComponent("appShell"),
    container: makeNodeComponent("container"),
    registerModal: makeNodeComponent("registerModal"),
    statForm: makeNodeComponent("statForm"),
    callsMade: makeNodeComponent("callsMade"),
    callsMadeInput: makeNodeComponent("callsMadeInput"),
    callsAnswered: makeNodeComponent("callsAnswered"),
    callsAnsweredInput: makeNodeComponent("callsAnsweredInput"),
    callsMoney: makeNodeComponent("callsMoney"),
    callsMoneyInput: makeNodeComponent("callsMoneyInput"),
    lettersMade: makeNodeComponent("lettersMade"),
    letterMadeInput: makeNodeComponent("letterMadeInput"),
    lettersAnswered: makeNodeComponent("lettersAnswered"),
    lettersAnsweredInput: makeNodeComponent("lettersAnsweredInput"),
    lettersMoney: makeNodeComponent("lettersMoney"),
    lettersMoneyInput: makeNodeComponent("lettersMoneyInput"),
    mlsProperties: makeNodeComponent("mlsProperties"),
    mlsPropertiesInput: makeNodeComponent("mlsPropertiesInput"),
    lettersProperties: makeNodeComponent("lettersProperties"),
    lettersPropertiesInput: makeNodeComponent("lettersPropertiesInput"),
    callsProperties: makeNodeComponent("callsProperties"),
    callsPropertiesInput: makeNodeComponent("callsPropertiesInput"),
    offersMadeMls: makeNodeComponent("offersMadeMls"),
    offersMadeMlsInput: makeNodeComponent("offersMadeMlsInput"),
    offersMadeLetters: makeNodeComponent("offersMadeLetters"),
    offersMadeLettersInput: makeNodeComponent("offersMadeLettersInput"),
    offersMadeCalls: makeNodeComponent("offersMadeCalls"),
    offersMadeCallsInput: makeNodeComponent("offersMadeCallsInput"),
    offersApprovedMls: makeNodeComponent("offersApprovedMls"),
    offersApprovedMlsInput: makeNodeComponent("offersApprovedMlsInput"),
    offersApprovedLetters: makeNodeComponent("offersApprovedLetters"),
    offersApprovedLettersInput: makeNodeComponent("offersApprovedLettersInput"),
    offersApprovedCalls: makeNodeComponent("offersApprovedCalls"),
    offersApprovedCallsInput: makeNodeComponent("offersApprovedCallsInput"),
    deals: makeNodeComponent("deals"),
    dealsInput: makeNodeComponent("dealsInput"),
    container2: makeNodeComponent("container2"),
    stats: makeNodeComponent("stats"),
    icon: makeNodeComponent("icon"),
    icon2: makeNodeComponent("icon2"),
    icon3: makeNodeComponent("icon3"),
    icon4: makeNodeComponent("icon4"),
    icon6: makeNodeComponent("icon6"),
    icon7: makeNodeComponent("icon7"),
    icon5: makeNodeComponent("icon5"),
    icon8: makeNodeComponent("icon8"),
    charts: makeNodeComponent("charts"),

    // Metadata about props expected for PlasmicDashboard
    internalVariantProps: PlasmicDashboard__VariantProps,
    internalArgProps: PlasmicDashboard__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicDashboard;
/* prettier-ignore-end */
