// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: okr6zFws8g9BFEw4Fons9x
// Component: YiC5r609TqU0

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import Card from "/components/Card/Card.tsx"; // plasmic-import: eSaP_wpvN1LT/codeComponent
import TitleText from "../../TitleText"; // plasmic-import: NxJEJ3yCzHgk/component
import Form from "../../Form"; // plasmic-import: rb5_PS-3AnYe/component
import FormField from "../../FormField"; // plasmic-import: yLHiIXcGvJuv/component
import TextInput from "/components/TextInput/TextInput.tsx"; // plasmic-import: Z13Cbt3lzIov/codeComponent
import PasswordInput from "/components/PasswordInput/PasswordInput.tsx"; // plasmic-import: QqMpCHKA1X8a/codeComponent
import Button from "/components/Button/Button.tsx"; // plasmic-import: fWdCiIO3iYJP/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import plasmic_inprodi_design_system_css from "../inprodi_design_system/plasmic.module.css"; // plasmic-import: 5nPYJMkHKsudqrrya3SLGq/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: okr6zFws8g9BFEw4Fons9x/projectcss
import sty from "./PlasmicLogin.module.css"; // plasmic-import: YiC5r609TqU0/css

import { validateEmail as __fn_validateEmail } from "~/helpers/validateEmail"; // plasmic-import: validateEmail/customFunction
import { showNotification as __fn_showNotification } from "~/helpers/showNotification"; // plasmic-import: showNotification/customFunction

createPlasmicElementProxy;

export type PlasmicLogin__VariantMembers = {};
export type PlasmicLogin__VariantsArgs = {};
type VariantPropType = keyof PlasmicLogin__VariantsArgs;
export const PlasmicLogin__VariantProps = new Array<VariantPropType>();

export type PlasmicLogin__ArgsType = {};
type ArgPropType = keyof PlasmicLogin__ArgsType;
export const PlasmicLogin__ArgProps = new Array<ArgPropType>();

export type PlasmicLogin__OverridesType = {
  mainSection?: Flex__<"div">;
  logo?: Flex__<typeof PlasmicImg__>;
  card?: Flex__<typeof Card>;
  container?: Flex__<"div">;
  titleText?: Flex__<typeof TitleText>;
  loginForm?: Flex__<typeof Form>;
  emailField?: Flex__<typeof FormField>;
  emailInput?: Flex__<typeof TextInput>;
  passwordField?: Flex__<typeof FormField>;
  passwordInput?: Flex__<typeof PasswordInput>;
  button?: Flex__<typeof Button>;
};

export interface DefaultLoginProps {}

const $$ = {
  validateEmail: __fn_validateEmail,
  showNotification: __fn_showNotification
};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicLogin__RenderFunc(props: {
  variants: PlasmicLogin__VariantsArgs;
  args: PlasmicLogin__ArgsType;
  overrides: PlasmicLogin__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "loginForm.values",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({
          email: "",
          password: ""
        })
      },
      {
        path: "loginForm.errors",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "loginForm.validation",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "emailField.error",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.loginForm.errors.email;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "passwordField.error",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.loginForm.errors.password;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "passwordInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "emailInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "query",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({ login: false })
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicLogin.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicLogin.pageMetadata.title}
        />

        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicLogin.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <Stack__
          as={"div"}
          data-plasmic-name={"mainSection"}
          data-plasmic-override={overrides.mainSection}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            plasmic_inprodi_design_system_css.plasmic_tokens,
            sty.mainSection
          )}
        >
          <PlasmicImg__
            data-plasmic-name={"logo"}
            data-plasmic-override={overrides.logo}
            alt={""}
            className={classNames(sty.logo)}
            displayHeight={"50px"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"auto"}
            loading={"eager"}
            src={{
              src: "/plasmic/pro_180/images/pro180Logopng.png",
              fullWidth: 854,
              fullHeight: 215,
              aspectRatio: undefined
            }}
          />

          <Card
            data-plasmic-name={"card"}
            data-plasmic-override={overrides.card}
            className={classNames("__wab_instance", sty.card)}
            content={
              <Stack__
                as={"div"}
                data-plasmic-name={"container"}
                data-plasmic-override={overrides.container}
                hasGap={true}
                className={classNames(projectcss.all, sty.container)}
              >
                <TitleText
                  data-plasmic-name={"titleText"}
                  data-plasmic-override={overrides.titleText}
                  className={classNames("__wab_instance", sty.titleText)}
                  direction={"center"}
                  secondaryText={
                    "\u00a1Bienvenido de nuevo! Ingresa tu usuario y contrase\u00f1a para acceder a la plataforma."
                  }
                  size={"md"}
                  title={"Iniciar Sesi\u00f3n"}
                />

                <Form
                  data-plasmic-name={"loginForm"}
                  data-plasmic-override={overrides.loginForm}
                  className={classNames("__wab_instance", sty.loginForm)}
                  content={
                    <React.Fragment>
                      <FormField
                        data-plasmic-name={"emailField"}
                        data-plasmic-override={overrides.emailField}
                        className={classNames("__wab_instance", sty.emailField)}
                        error={generateStateValueProp($state, [
                          "emailField",
                          "error"
                        ])}
                        input={
                          <TextInput
                            data-plasmic-name={"emailInput"}
                            data-plasmic-override={overrides.emailInput}
                            allowClear={false}
                            className={classNames(
                              "__wab_instance",
                              sty.emailInput
                            )}
                            debounce={0}
                            defaultValue={""}
                            disabled={false}
                            leftIcon={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__h7H9U
                                )}
                              >
                                {"Drop Icon"}
                              </div>
                            }
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "emailInput",
                                "value"
                              ]).apply(null, eventArgs);
                              (async value => {
                                const $steps = {};

                                $steps["updateFormErrorsEmail"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: [
                                            "loginForm",
                                            "errors",
                                            "email"
                                          ]
                                        },
                                        operation: 1
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(
                                          objRoot,
                                          variablePath,
                                          undefined
                                        );
                                        return undefined;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateFormErrorsEmail"] != null &&
                                  typeof $steps["updateFormErrorsEmail"] ===
                                    "object" &&
                                  typeof $steps["updateFormErrorsEmail"]
                                    .then === "function"
                                ) {
                                  $steps["updateFormErrorsEmail"] =
                                    await $steps["updateFormErrorsEmail"];
                                }

                                $steps["updateFormErrorsEmail2"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: [
                                            "loginForm",
                                            "values",
                                            "email"
                                          ]
                                        },
                                        operation: 0,
                                        value: $state.emailInput.value
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateFormErrorsEmail2"] != null &&
                                  typeof $steps["updateFormErrorsEmail2"] ===
                                    "object" &&
                                  typeof $steps["updateFormErrorsEmail2"]
                                    .then === "function"
                                ) {
                                  $steps["updateFormErrorsEmail2"] =
                                    await $steps["updateFormErrorsEmail2"];
                                }
                              }).apply(null, eventArgs);
                            }}
                            placeholder={"mail@tu-empresa.com"}
                            rightIcon={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__crGuQ
                                )}
                              >
                                {"Drop Icon"}
                              </div>
                            }
                            showLeftIcon={false}
                            showRightIcon={false}
                            size={"middle"}
                            status={(() => {
                              try {
                                return (() => {
                                  if ($state.loginForm.errors.email)
                                    return "error";
                                })();
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            value={generateStateValueProp($state, [
                              "emailInput",
                              "value"
                            ])}
                            variant={"outlined"}
                          />
                        }
                        label2={"Correo Electr\u00f3nico"}
                        onErrorChange={generateStateOnChangeProp($state, [
                          "emailField",
                          "error"
                        ])}
                      />

                      <FormField
                        data-plasmic-name={"passwordField"}
                        data-plasmic-override={overrides.passwordField}
                        className={classNames(
                          "__wab_instance",
                          sty.passwordField
                        )}
                        error={generateStateValueProp($state, [
                          "passwordField",
                          "error"
                        ])}
                        input={
                          <PasswordInput
                            data-plasmic-name={"passwordInput"}
                            data-plasmic-override={overrides.passwordInput}
                            allowClear={false}
                            className={classNames(
                              "__wab_instance",
                              sty.passwordInput
                            )}
                            defaultValue={""}
                            disabled={false}
                            leftIcon={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___8O4T1
                                )}
                              >
                                {"Drop Icon"}
                              </div>
                            }
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "passwordInput",
                                "value"
                              ]).apply(null, eventArgs);
                              (async value => {
                                const $steps = {};

                                $steps["updateFormErrorsPassword"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: [
                                            "loginForm",
                                            "errors",
                                            "password"
                                          ]
                                        },
                                        operation: 1
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(
                                          objRoot,
                                          variablePath,
                                          undefined
                                        );
                                        return undefined;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateFormErrorsPassword"] != null &&
                                  typeof $steps["updateFormErrorsPassword"] ===
                                    "object" &&
                                  typeof $steps["updateFormErrorsPassword"]
                                    .then === "function"
                                ) {
                                  $steps["updateFormErrorsPassword"] =
                                    await $steps["updateFormErrorsPassword"];
                                }

                                $steps["updateFormValuesPassword"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: [
                                            "loginForm",
                                            "values",
                                            "password"
                                          ]
                                        },
                                        operation: 0,
                                        value: $state.passwordInput.value
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateFormValuesPassword"] != null &&
                                  typeof $steps["updateFormValuesPassword"] ===
                                    "object" &&
                                  typeof $steps["updateFormValuesPassword"]
                                    .then === "function"
                                ) {
                                  $steps["updateFormValuesPassword"] =
                                    await $steps["updateFormValuesPassword"];
                                }
                              }).apply(null, eventArgs);
                            }}
                            placeholder={"••••••••••••"}
                            rightIcon={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__j3U70
                                )}
                              >
                                {"Drop Icon"}
                              </div>
                            }
                            showLeftIcon={false}
                            showRightIcon={false}
                            size={"middle"}
                            status={(() => {
                              try {
                                return (() => {
                                  if ($state.loginForm.errors.password)
                                    return "error";
                                })();
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            value={generateStateValueProp($state, [
                              "passwordInput",
                              "value"
                            ])}
                            variant={"outlined"}
                          />
                        }
                        label2={"Contrase\u00f1a"}
                        onErrorChange={generateStateOnChangeProp($state, [
                          "passwordField",
                          "error"
                        ])}
                      />

                      <Button
                        data-plasmic-name={"button"}
                        data-plasmic-override={overrides.button}
                        block={true}
                        className={classNames("__wab_instance", sty.button)}
                        danger={false}
                        ghost={false}
                        iconPosition={"end"}
                        isSubmit={true}
                        label={"Iniciar Sesi\u00f3n"}
                        loading={(() => {
                          try {
                            return $state.query.login;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return false;
                            }
                            throw e;
                          }
                        })()}
                        size={"middle"}
                        variant={"primary"}
                        withIcon={false}
                      />
                    </React.Fragment>
                  }
                  errors={generateStateValueProp($state, [
                    "loginForm",
                    "errors"
                  ])}
                  onErrorsChange={generateStateOnChangeProp($state, [
                    "loginForm",
                    "errors"
                  ])}
                  onSubmit={async () => {
                    const $steps = {};

                    $steps["validateForm"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (() => {
                                let isValid = true;
                                if (!$state.emailInput.value) {
                                  $state.loginForm.errors.email =
                                    "Ingresa tu correo electrónico";
                                  isValid = false;
                                } else if (
                                  !$$.validateEmail($state.emailInput.value)
                                ) {
                                  $state.loginForm.errors.email =
                                    "Ingresa un correo electrónico válido";
                                  isValid = false;
                                }
                                if (!$state.passwordInput.value) {
                                  $state.loginForm.errors.password =
                                    "Ingresa tu contraseña";
                                  isValid = false;
                                }
                                return isValid;
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["validateForm"] != null &&
                      typeof $steps["validateForm"] === "object" &&
                      typeof $steps["validateForm"].then === "function"
                    ) {
                      $steps["validateForm"] = await $steps["validateForm"];
                    }

                    $steps["setLoading"] = $steps.validateForm
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["query", "login"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["setLoading"] != null &&
                      typeof $steps["setLoading"] === "object" &&
                      typeof $steps["setLoading"].then === "function"
                    ) {
                      $steps["setLoading"] = await $steps["setLoading"];
                    }

                    $steps["loginRequest"] = $steps.validateForm
                      ? (() => {
                          const actionArgs = {
                            dataOp: {
                              sourceId: "9SbcJmsXuR3ob6ZWwKJZY9",
                              opId: "6a5e00be-f774-4a05-8ad3-170fc9d099bb",
                              userArgs: {
                                body: [
                                  {
                                    email: $state.emailInput.value,
                                    password: $state.passwordInput.value
                                  }
                                ]
                              },
                              cacheKey: null,
                              invalidatedKeys: ["plasmic_refresh_all"],
                              roleId: null
                            },
                            continueOnError: true
                          };
                          return (async ({ dataOp, continueOnError }) => {
                            try {
                              const response = await executePlasmicDataOp(
                                dataOp,
                                {
                                  userAuthToken: dataSourcesCtx?.userAuthToken,
                                  user: dataSourcesCtx?.user
                                }
                              );
                              await plasmicInvalidate(dataOp.invalidatedKeys);
                              return response;
                            } catch (e) {
                              if (!continueOnError) {
                                throw e;
                              }
                              return e;
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["loginRequest"] != null &&
                      typeof $steps["loginRequest"] === "object" &&
                      typeof $steps["loginRequest"].then === "function"
                    ) {
                      $steps["loginRequest"] = await $steps["loginRequest"];
                    }

                    $steps["handleError"] = (() => {
                      return (
                        $steps.loginRequest.statusCode !== 200 &&
                        $steps.loginRequest.statusCode
                      );
                    })()
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (() => {
                                const errorKey =
                                  $steps.loginRequest.details?.key;
                                switch (errorKey) {
                                  case "user.notFound":
                                    $state.loginForm.errors.email =
                                      "Los accesos ingresados son incorrectos";
                                    break;
                                  default:
                                    $$.showNotification(
                                      "Ha ocurrido un error inesperado",
                                      {
                                        description:
                                          "Intenta nuevamente, y si el error persiste, contacta a soporte."
                                      }
                                    );
                                    break;
                                }
                                return ($state.query.login = false);
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["handleError"] != null &&
                      typeof $steps["handleError"] === "object" &&
                      typeof $steps["handleError"].then === "function"
                    ) {
                      $steps["handleError"] = await $steps["handleError"];
                    }

                    $steps["handleSuccess"] = (() => {
                      return $steps.loginRequest.data?.statusCode === 200;
                    })()
                      ? (() => {
                          const actionArgs = {
                            args: [
                              (() => {
                                try {
                                  return $steps.loginRequest.data.response
                                    .token;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })(),
                              (() => {
                                try {
                                  return $steps.loginRequest.data.response.user;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return $globalActions[
                            "AuthGlobalContext.login"
                          ]?.apply(null, [...actionArgs.args]);
                        })()
                      : undefined;
                    if (
                      $steps["handleSuccess"] != null &&
                      typeof $steps["handleSuccess"] === "object" &&
                      typeof $steps["handleSuccess"].then === "function"
                    ) {
                      $steps["handleSuccess"] = await $steps["handleSuccess"];
                    }

                    $steps["redirect"] = (() => {
                      return $steps.loginRequest.data?.statusCode === 200;
                    })()
                      ? (() => {
                          const actionArgs = { destination: `/dashboard` };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["redirect"] != null &&
                      typeof $steps["redirect"] === "object" &&
                      typeof $steps["redirect"].then === "function"
                    ) {
                      $steps["redirect"] = await $steps["redirect"];
                    }
                  }}
                  onValidationChange={generateStateOnChangeProp($state, [
                    "loginForm",
                    "validation"
                  ])}
                  onValuesChange={generateStateOnChangeProp($state, [
                    "loginForm",
                    "values"
                  ])}
                  validation={generateStateValueProp($state, [
                    "loginForm",
                    "validation"
                  ])}
                  values={generateStateValueProp($state, [
                    "loginForm",
                    "values"
                  ])}
                />
              </Stack__>
            }
            description={"Card description"}
            loading={false}
            padding={"20px"}
            shadow={"lg"}
            showTitle={false}
            title={"Card Title"}
            width={"450px"}
          />
        </Stack__>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  mainSection: [
    "mainSection",
    "logo",
    "card",
    "container",
    "titleText",
    "loginForm",
    "emailField",
    "emailInput",
    "passwordField",
    "passwordInput",
    "button"
  ],

  logo: ["logo"],
  card: [
    "card",
    "container",
    "titleText",
    "loginForm",
    "emailField",
    "emailInput",
    "passwordField",
    "passwordInput",
    "button"
  ],

  container: [
    "container",
    "titleText",
    "loginForm",
    "emailField",
    "emailInput",
    "passwordField",
    "passwordInput",
    "button"
  ],

  titleText: ["titleText"],
  loginForm: [
    "loginForm",
    "emailField",
    "emailInput",
    "passwordField",
    "passwordInput",
    "button"
  ],

  emailField: ["emailField", "emailInput"],
  emailInput: ["emailInput"],
  passwordField: ["passwordField", "passwordInput"],
  passwordInput: ["passwordInput"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  mainSection: "div";
  logo: typeof PlasmicImg__;
  card: typeof Card;
  container: "div";
  titleText: typeof TitleText;
  loginForm: typeof Form;
  emailField: typeof FormField;
  emailInput: typeof TextInput;
  passwordField: typeof FormField;
  passwordInput: typeof PasswordInput;
  button: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLogin__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLogin__VariantsArgs;
    args?: PlasmicLogin__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLogin__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicLogin__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLogin__ArgProps,
          internalVariantPropNames: PlasmicLogin__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLogin__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "mainSection") {
    func.displayName = "PlasmicLogin";
  } else {
    func.displayName = `PlasmicLogin.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "okr6zFws8g9BFEw4Fons9x"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicLogin = Object.assign(
  // Top-level PlasmicLogin renders the root element
  withUsePlasmicAuth(makeNodeComponent("mainSection")),
  {
    // Helper components rendering sub-elements
    logo: makeNodeComponent("logo"),
    card: makeNodeComponent("card"),
    container: makeNodeComponent("container"),
    titleText: makeNodeComponent("titleText"),
    loginForm: makeNodeComponent("loginForm"),
    emailField: makeNodeComponent("emailField"),
    emailInput: makeNodeComponent("emailInput"),
    passwordField: makeNodeComponent("passwordField"),
    passwordInput: makeNodeComponent("passwordInput"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicLogin
    internalVariantProps: PlasmicLogin__VariantProps,
    internalArgProps: PlasmicLogin__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Iniciar Sesión",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicLogin;
/* prettier-ignore-end */
