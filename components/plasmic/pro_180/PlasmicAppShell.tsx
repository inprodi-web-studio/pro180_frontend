// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: okr6zFws8g9BFEw4Fons9x
// Component: zdymZc8lM6F1

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import Form from "../../Form"; // plasmic-import: rb5_PS-3AnYe/component
import FormField from "../../FormField"; // plasmic-import: yLHiIXcGvJuv/component
import PasswordInput from "/components/PasswordInput/PasswordInput.tsx"; // plasmic-import: QqMpCHKA1X8a/codeComponent
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import Button from "/components/Button/Button.tsx"; // plasmic-import: fWdCiIO3iYJP/codeComponent
import { LoadingBoundary } from "@plasmicpkgs/plasmic-basic-components";
import { LottieWrapper } from "@plasmicpkgs/lottie-react";

import {
  ColorSchemeValue,
  useColorScheme
} from "../inprodi_design_system/PlasmicGlobalVariant__ColorScheme"; // plasmic-import: gdgBwRVFC7MJ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import plasmic_inprodi_design_system_css from "../inprodi_design_system/plasmic.module.css"; // plasmic-import: 5nPYJMkHKsudqrrya3SLGq/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: okr6zFws8g9BFEw4Fons9x/projectcss
import sty from "./PlasmicAppShell.module.css"; // plasmic-import: zdymZc8lM6F1/css

createPlasmicElementProxy;

export type PlasmicAppShell__VariantMembers = {};
export type PlasmicAppShell__VariantsArgs = {};
type VariantPropType = keyof PlasmicAppShell__VariantsArgs;
export const PlasmicAppShell__VariantProps = new Array<VariantPropType>();

export type PlasmicAppShell__ArgsType = {
  content2?: React.ReactNode;
  passwordLoading?: boolean;
  onPasswordLoadingChange?: (val: string) => void;
};
type ArgPropType = keyof PlasmicAppShell__ArgsType;
export const PlasmicAppShell__ArgProps = new Array<ArgPropType>(
  "content2",
  "passwordLoading",
  "onPasswordLoadingChange"
);

export type PlasmicAppShell__OverridesType = {
  mainContainer?: Flex__<"div">;
  topBar?: Flex__<"div">;
  left?: Flex__<"div">;
  logotype?: Flex__<typeof PlasmicImg__>;
  freeBox?: Flex__<"div">;
  modal?: Flex__<typeof AntdModal>;
  form?: Flex__<typeof Form>;
  formField?: Flex__<typeof FormField>;
  current?: Flex__<typeof PasswordInput>;
  formField3?: Flex__<typeof FormField>;
  newPass?: Flex__<typeof PasswordInput>;
  content?: Flex__<"div">;
  loadingBoundary?: Flex__<typeof LoadingBoundary>;
  lottie?: Flex__<typeof LottieWrapper>;
};

export interface DefaultAppShellProps {
  content2?: React.ReactNode;
  passwordLoading?: boolean;
  onPasswordLoadingChange?: (val: string) => void;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAppShell__RenderFunc(props: {
  variants: PlasmicAppShell__VariantsArgs;
  args: PlasmicAppShell__ArgsType;
  overrides: PlasmicAppShell__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "modal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "form.values",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "form.errors",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "form.validation",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "formField.error",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "current.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "formField3.error",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "newPass.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "passwordLoading",
        type: "writable",
        variableType: "boolean",

        valueProp: "passwordLoading",
        onChangeProp: "onPasswordLoadingChange"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const globalVariants = ensureGlobalVariants({
    colorScheme: useColorScheme()
  });

  return (
    <div
      data-plasmic-name={"mainContainer"}
      data-plasmic-override={overrides.mainContainer}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        plasmic_inprodi_design_system_css.plasmic_tokens,
        sty.mainContainer,
        {
          [sty.mainContainerglobal_colorScheme_dark]: hasVariant(
            globalVariants,
            "colorScheme",
            "dark"
          )
        }
      )}
    >
      <div
        data-plasmic-name={"topBar"}
        data-plasmic-override={overrides.topBar}
        className={classNames(projectcss.all, sty.topBar)}
      >
        <div
          data-plasmic-name={"left"}
          data-plasmic-override={overrides.left}
          className={classNames(projectcss.all, sty.left)}
        >
          <PlasmicImg__
            data-plasmic-name={"logotype"}
            data-plasmic-override={overrides.logotype}
            alt={""}
            className={classNames(sty.logotype)}
            displayHeight={"30px"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"auto"}
            loading={"lazy"}
            src={{
              src: "/plasmic/pro_180/images/pro180Light1Png.png",
              fullWidth: 305,
              fullHeight: 67,
              aspectRatio: undefined
            }}
          />
        </div>
        <Stack__
          as={"div"}
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox)}
        >
          <AntdModal
            data-plasmic-name={"modal"}
            data-plasmic-override={overrides.modal}
            className={classNames("__wab_instance", sty.modal)}
            defaultStylesClassName={classNames(
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_antd_5_hostless_css.plasmic_tokens,
              plasmic_plasmic_rich_components_css.plasmic_tokens,
              plasmic_inprodi_design_system_css.plasmic_tokens
            )}
            footer={
              <Button
                block={true}
                className={classNames("__wab_instance", sty.button__urDeM)}
                danger={false}
                ghost={false}
                iconPosition={"start"}
                isSubmit={false}
                label={"Guardar Cambios"}
                loading={(() => {
                  try {
                    return $state.passwordLoading;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return false;
                    }
                    throw e;
                  }
                })()}
                onClick={async () => {
                  const $steps = {};

                  $steps["setLoading"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["passwordLoading"]
                          },
                          operation: 0,
                          value: true
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["setLoading"] != null &&
                    typeof $steps["setLoading"] === "object" &&
                    typeof $steps["setLoading"].then === "function"
                  ) {
                    $steps["setLoading"] = await $steps["setLoading"];
                  }

                  $steps["patchRequest"] = true
                    ? (() => {
                        const actionArgs = {
                          dataOp: {
                            sourceId: "9SbcJmsXuR3ob6ZWwKJZY9",
                            opId: "212fae76-8a53-4688-bfb2-963c0554e42d",
                            userArgs: {
                              params: [
                                $state.current.value,
                                $state.newPass.value
                              ],
                              headers: [`Bearer ${$ctx.token}`]
                            },
                            cacheKey: null,
                            invalidatedKeys: null,
                            roleId: null
                          }
                        };
                        return (async ({ dataOp, continueOnError }) => {
                          try {
                            const response = await executePlasmicDataOp(
                              dataOp,
                              {
                                userAuthToken: dataSourcesCtx?.userAuthToken,
                                user: dataSourcesCtx?.user
                              }
                            );
                            await plasmicInvalidate(dataOp.invalidatedKeys);
                            return response;
                          } catch (e) {
                            if (!continueOnError) {
                              throw e;
                            }
                            return e;
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["patchRequest"] != null &&
                    typeof $steps["patchRequest"] === "object" &&
                    typeof $steps["patchRequest"].then === "function"
                  ) {
                    $steps["patchRequest"] = await $steps["patchRequest"];
                  }

                  $steps["offLoading"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["passwordLoading"]
                          },
                          operation: 0,
                          value: false
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["offLoading"] != null &&
                    typeof $steps["offLoading"] === "object" &&
                    typeof $steps["offLoading"].then === "function"
                  ) {
                    $steps["offLoading"] = await $steps["offLoading"];
                  }

                  $steps["closeModal"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["modal", "open"]
                          },
                          operation: 4
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          const oldValue = $stateGet(objRoot, variablePath);
                          $stateSet(objRoot, variablePath, !oldValue);
                          return !oldValue;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["closeModal"] != null &&
                    typeof $steps["closeModal"] === "object" &&
                    typeof $steps["closeModal"].then === "function"
                  ) {
                    $steps["closeModal"] = await $steps["closeModal"];
                  }
                }}
                size={"middle"}
                variant={"primary"}
                withIcon={false}
              />
            }
            modalScopeClassName={sty["modal__modal"]}
            onOpenChange={generateStateOnChangeProp($state, ["modal", "open"])}
            open={generateStateValueProp($state, ["modal", "open"])}
            title={"Cambiar Contrase\u00f1a"}
            trigger={
              <AntdButton
                className={classNames("__wab_instance", sty.button__yT50X)}
                type={"primary"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___0FyGo
                  )}
                >
                  {"Cambiar Contrase\u00f1a"}
                </div>
              </AntdButton>
            }
          >
            <Form
              data-plasmic-name={"form"}
              data-plasmic-override={overrides.form}
              className={classNames("__wab_instance", sty.form)}
              content={
                <React.Fragment>
                  <FormField
                    data-plasmic-name={"formField"}
                    data-plasmic-override={overrides.formField}
                    className={classNames("__wab_instance", sty.formField)}
                    error={generateStateValueProp($state, [
                      "formField",
                      "error"
                    ])}
                    input={
                      <PasswordInput
                        data-plasmic-name={"current"}
                        data-plasmic-override={overrides.current}
                        allowClear={false}
                        className={classNames("__wab_instance", sty.current)}
                        defaultValue={""}
                        disabled={false}
                        leftIcon={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__btJmg
                            )}
                          >
                            {"Drop Icon"}
                          </div>
                        }
                        onChange={generateStateOnChangeProp($state, [
                          "current",
                          "value"
                        ])}
                        placeholder={"••••••••••••"}
                        rightIcon={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__pMr5N
                            )}
                          >
                            {"Drop Icon"}
                          </div>
                        }
                        showLeftIcon={false}
                        showRightIcon={false}
                        size={"middle"}
                        value={generateStateValueProp($state, [
                          "current",
                          "value"
                        ])}
                        variant={"outlined"}
                      />
                    }
                    label2={"Contrase\u00f1a Actual"}
                    onErrorChange={generateStateOnChangeProp($state, [
                      "formField",
                      "error"
                    ])}
                  />

                  <FormField
                    data-plasmic-name={"formField3"}
                    data-plasmic-override={overrides.formField3}
                    className={classNames("__wab_instance", sty.formField3)}
                    error={generateStateValueProp($state, [
                      "formField3",
                      "error"
                    ])}
                    input={
                      <PasswordInput
                        data-plasmic-name={"newPass"}
                        data-plasmic-override={overrides.newPass}
                        allowClear={false}
                        className={classNames("__wab_instance", sty.newPass)}
                        defaultValue={""}
                        disabled={false}
                        leftIcon={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__bsGda
                            )}
                          >
                            {"Drop Icon"}
                          </div>
                        }
                        onChange={generateStateOnChangeProp($state, [
                          "newPass",
                          "value"
                        ])}
                        placeholder={"••••••••••••"}
                        rightIcon={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__aVuj5
                            )}
                          >
                            {"Drop Icon"}
                          </div>
                        }
                        showLeftIcon={false}
                        showRightIcon={false}
                        size={"middle"}
                        value={generateStateValueProp($state, [
                          "newPass",
                          "value"
                        ])}
                        variant={"outlined"}
                      />
                    }
                    label2={"Nueva Contrase\u00f1a"}
                    onErrorChange={generateStateOnChangeProp($state, [
                      "formField3",
                      "error"
                    ])}
                  />
                </React.Fragment>
              }
              errors={generateStateValueProp($state, ["form", "errors"])}
              onErrorsChange={generateStateOnChangeProp($state, [
                "form",
                "errors"
              ])}
              onValidationChange={generateStateOnChangeProp($state, [
                "form",
                "validation"
              ])}
              onValuesChange={generateStateOnChangeProp($state, [
                "form",
                "values"
              ])}
              validation={generateStateValueProp($state, [
                "form",
                "validation"
              ])}
              values={generateStateValueProp($state, ["form", "values"])}
            />
          </AntdModal>
          <Button
            block={false}
            className={classNames("__wab_instance", sty.button__yw4P)}
            danger={true}
            ghost={true}
            iconPosition={"start"}
            isSubmit={false}
            label={"Cerrar Sesi\u00f3n"}
            loading={false}
            onClick={async () => {
              const $steps = {};

              $steps["logout"] = true
                ? (() => {
                    const actionArgs = { args: [] };
                    return $globalActions["AuthGlobalContext.logout"]?.apply(
                      null,
                      [...actionArgs.args]
                    );
                  })()
                : undefined;
              if (
                $steps["logout"] != null &&
                typeof $steps["logout"] === "object" &&
                typeof $steps["logout"].then === "function"
              ) {
                $steps["logout"] = await $steps["logout"];
              }

              $steps["navigate"] = true
                ? (() => {
                    const actionArgs = { destination: `/auth/login` };
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        __nextRouter?.push(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["navigate"] != null &&
                typeof $steps["navigate"] === "object" &&
                typeof $steps["navigate"].then === "function"
              ) {
                $steps["navigate"] = await $steps["navigate"];
              }
            }}
            size={"middle"}
            variant={"primary"}
            withIcon={false}
          />
        </Stack__>
      </div>
      <div
        data-plasmic-name={"content"}
        data-plasmic-override={overrides.content}
        className={classNames(projectcss.all, sty.content)}
      >
        <LoadingBoundary
          data-plasmic-name={"loadingBoundary"}
          data-plasmic-override={overrides.loadingBoundary}
          className={classNames("__wab_instance", sty.loadingBoundary)}
          loadingState={
            <DataCtxReader__>
              {$ctx => (
                <LottieWrapper
                  data-plasmic-name={"lottie"}
                  data-plasmic-override={overrides.lottie}
                  animationData={{
                    v: "5.0.1",
                    fr: 10,
                    ip: 0,
                    op: 20,
                    w: 800,
                    h: 600,
                    ddd: 0,
                    assets: [],
                    layers: [
                      {
                        ind: 3,
                        nm: "Layer 3",
                        ks: {
                          p: {
                            a: 1,
                            k: [
                              {
                                t: 0,
                                s: [456.419, 423.252, 0],
                                to: [-161.825, -53.536, 0],
                                ti: [-62.867, 94.219, 0],
                                i: { x: [0.15], y: [0.86] },
                                o: { x: [0.785], y: [0.135] },
                                e: [371.703, 167.513, 0]
                              },
                              {
                                t: 10,
                                s: [371.703, 167.513, 0],
                                to: [0, 0, 0],
                                ti: [0, 0, 0],
                                i: { x: [0.15], y: [0.86] },
                                o: { x: [0.785], y: [0.135] },
                                e: [456.419, 423.252, 0]
                              },
                              { t: 20, s: [456.419, 423.252, 0] }
                            ]
                          },
                          a: { a: 0, k: [-24.5, -24.5, 0] },
                          s: { a: 0, k: [100, 100, 100] },
                          r: { a: 0, k: -43.065 },
                          o: { a: 0, k: 100 }
                        },
                        ao: 0,
                        ip: 0,
                        op: 20,
                        st: 0,
                        bm: 3,
                        sr: 1,
                        ty: 4,
                        shapes: [
                          {
                            ty: "gr",
                            it: [
                              {
                                d: 1,
                                ty: "el",
                                s: { a: 0, k: [210.919, 210.919] },
                                p: { a: 0, k: [0, 0] }
                              },
                              {
                                ty: "fl",
                                c: { a: 0, k: [0, 0.698, 1, 1] },
                                hd: false,
                                o: { a: 0, k: 100 },
                                r: 1
                              },
                              {
                                ty: "tr",
                                p: { a: 0, k: [0, 0] },
                                a: { a: 0, k: [0, 0] },
                                s: { a: 0, k: [100, 100] },
                                r: { a: 0, k: 0 },
                                o: { a: 0, k: 100 },
                                sk: { a: 0, k: 0 },
                                sa: { a: 0, k: 0 }
                              }
                            ],
                            nm: "Object",
                            hd: false
                          }
                        ]
                      },
                      {
                        ind: 2,
                        nm: "Layer 2",
                        ks: {
                          p: {
                            a: 1,
                            k: [
                              {
                                t: 0,
                                s: [361.777, 165.918, 0],
                                to: [0, 0, 0],
                                ti: [0, 0, 0],
                                i: { x: [0.15], y: [0.86] },
                                o: { x: [0.785], y: [0.135] },
                                e: [214.784, 406.838, 0]
                              },
                              {
                                t: 10,
                                s: [214.784, 406.838, 0],
                                to: [-83.035, -34.503, 0],
                                ti: [0, 0, 0],
                                i: { x: [0.15], y: [0.86] },
                                o: { x: [0.785], y: [0.135] },
                                e: [361.777, 165.918, 0]
                              },
                              { t: 20, s: [361.777, 165.918, 0] }
                            ]
                          },
                          a: { a: 0, k: [-66.5, -66.5, 0] },
                          s: { a: 0, k: [100, 100, 100] },
                          r: { a: 0, k: -43.065 },
                          o: { a: 0, k: 100 }
                        },
                        ao: 0,
                        ip: 0,
                        op: 20,
                        st: 0,
                        bm: 3,
                        sr: 1,
                        ty: 4,
                        shapes: [
                          {
                            ty: "gr",
                            it: [
                              {
                                d: 1,
                                ty: "el",
                                s: { a: 0, k: [236, 236] },
                                p: { a: 0, k: [0, 0] }
                              },
                              {
                                ty: "fl",
                                c: { a: 0, k: [0.012, 0, 0.38, 1] },
                                hd: false,
                                o: { a: 0, k: 100 },
                                r: 1
                              },
                              {
                                ty: "tr",
                                p: { a: 0, k: [0, 0] },
                                a: { a: 0, k: [0, 0] },
                                s: { a: 0, k: [100, 100] },
                                r: { a: 0, k: 0 },
                                o: { a: 0, k: 100 },
                                sk: { a: 0, k: 0 },
                                sa: { a: 0, k: 0 }
                              }
                            ],
                            nm: "Object",
                            hd: false
                          }
                        ]
                      },
                      {
                        ind: 1,
                        nm: "Layer 1",
                        ks: {
                          p: {
                            a: 1,
                            k: [
                              {
                                t: 0,
                                s: [263.776, 342.564, 0],
                                to: [0, 0, 0],
                                ti: [0, 0, 0],
                                i: { x: [0.15], y: [0.86] },
                                o: { x: [0.785], y: [0.135] },
                                e: [545.716, 355.446, 0]
                              },
                              {
                                t: 10,
                                s: [545.716, 355.446, 0],
                                to: [-7.345, 74.699, 0],
                                ti: [0, 0, 0],
                                i: { x: [0.15], y: [0.86] },
                                o: { x: [0.785], y: [0.135] },
                                e: [263.776, 342.564, 0]
                              },
                              { t: 20, s: [263.776, 342.564, 0] }
                            ]
                          },
                          a: { a: 0, k: [0, 0, 0] },
                          s: { a: 0, k: [100, 100, 100] },
                          r: { a: 0, k: -43.065 },
                          o: { a: 0, k: 100 }
                        },
                        ao: 0,
                        ip: 0,
                        op: 20,
                        st: 0,
                        bm: 3,
                        sr: 1,
                        ty: 4,
                        shapes: [
                          {
                            ty: "gr",
                            it: [
                              {
                                d: 1,
                                ty: "el",
                                s: { a: 0, k: [150.135, 150.135] },
                                p: { a: 0, k: [0, 0] }
                              },
                              {
                                ty: "fl",
                                c: { a: 0, k: [0.298, 0.255, 0.714, 1] },
                                hd: false,
                                o: { a: 0, k: 100 },
                                r: 1
                              },
                              {
                                ty: "tr",
                                p: { a: 0, k: [0, 0] },
                                a: { a: 0, k: [0, 0] },
                                s: { a: 0, k: [100, 100] },
                                r: { a: 0, k: 0 },
                                o: { a: 0, k: 100 },
                                sk: { a: 0, k: 0 },
                                sa: { a: 0, k: 0 }
                              }
                            ],
                            nm: "Object",
                            hd: false
                          }
                        ]
                      }
                    ],
                    markers: []
                  }}
                  className={classNames("__wab_instance", sty.lottie)}
                  preview={false}
                />
              )}
            </DataCtxReader__>
          }
        >
          <DataCtxReader__>
            {$ctx =>
              renderPlasmicSlot({
                defaultContents: null,
                value: args.content2
              })
            }
          </DataCtxReader__>
        </LoadingBoundary>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  mainContainer: [
    "mainContainer",
    "topBar",
    "left",
    "logotype",
    "freeBox",
    "modal",
    "form",
    "formField",
    "current",
    "formField3",
    "newPass",
    "content",
    "loadingBoundary",
    "lottie"
  ],
  topBar: [
    "topBar",
    "left",
    "logotype",
    "freeBox",
    "modal",
    "form",
    "formField",
    "current",
    "formField3",
    "newPass"
  ],
  left: ["left", "logotype"],
  logotype: ["logotype"],
  freeBox: [
    "freeBox",
    "modal",
    "form",
    "formField",
    "current",
    "formField3",
    "newPass"
  ],
  modal: ["modal", "form", "formField", "current", "formField3", "newPass"],
  form: ["form", "formField", "current", "formField3", "newPass"],
  formField: ["formField", "current"],
  current: ["current"],
  formField3: ["formField3", "newPass"],
  newPass: ["newPass"],
  content: ["content", "loadingBoundary", "lottie"],
  loadingBoundary: ["loadingBoundary", "lottie"],
  lottie: ["lottie"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  mainContainer: "div";
  topBar: "div";
  left: "div";
  logotype: typeof PlasmicImg__;
  freeBox: "div";
  modal: typeof AntdModal;
  form: typeof Form;
  formField: typeof FormField;
  current: typeof PasswordInput;
  formField3: typeof FormField;
  newPass: typeof PasswordInput;
  content: "div";
  loadingBoundary: typeof LoadingBoundary;
  lottie: typeof LottieWrapper;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAppShell__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAppShell__VariantsArgs;
    args?: PlasmicAppShell__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAppShell__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicAppShell__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAppShell__ArgProps,
          internalVariantPropNames: PlasmicAppShell__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAppShell__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "mainContainer") {
    func.displayName = "PlasmicAppShell";
  } else {
    func.displayName = `PlasmicAppShell.${nodeName}`;
  }
  return func;
}

export const PlasmicAppShell = Object.assign(
  // Top-level PlasmicAppShell renders the root element
  makeNodeComponent("mainContainer"),
  {
    // Helper components rendering sub-elements
    topBar: makeNodeComponent("topBar"),
    left: makeNodeComponent("left"),
    logotype: makeNodeComponent("logotype"),
    freeBox: makeNodeComponent("freeBox"),
    modal: makeNodeComponent("modal"),
    form: makeNodeComponent("form"),
    formField: makeNodeComponent("formField"),
    current: makeNodeComponent("current"),
    formField3: makeNodeComponent("formField3"),
    newPass: makeNodeComponent("newPass"),
    content: makeNodeComponent("content"),
    loadingBoundary: makeNodeComponent("loadingBoundary"),
    lottie: makeNodeComponent("lottie"),

    // Metadata about props expected for PlasmicAppShell
    internalVariantProps: PlasmicAppShell__VariantProps,
    internalArgProps: PlasmicAppShell__ArgProps
  }
);

export default PlasmicAppShell;
/* prettier-ignore-end */
