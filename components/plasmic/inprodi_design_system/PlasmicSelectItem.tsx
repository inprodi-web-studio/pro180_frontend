// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5nPYJMkHKsudqrrya3SLGq
// Component: hGFiaPJ3TZ_p

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 5nPYJMkHKsudqrrya3SLGq/projectcss
import sty from "./PlasmicSelectItem.module.css"; // plasmic-import: hGFiaPJ3TZ_p/css

import WarningDiamondsvgIcon from "./icons/PlasmicIcon__WarningDiamondsvg"; // plasmic-import: qLqG6TErDgjs/icon
import CheckCircleDuotonesvgIcon from "./icons/PlasmicIcon__CheckCircleDuotonesvg"; // plasmic-import: W6oixRWCrp9h/icon

createPlasmicElementProxy;

export type PlasmicSelectItem__VariantMembers = {
  isActive: "isActive";
  isDisabled: "isDisabled";
};
export type PlasmicSelectItem__VariantsArgs = {
  isActive?: SingleBooleanChoiceArg<"isActive">;
  isDisabled?: SingleBooleanChoiceArg<"isDisabled">;
};
type VariantPropType = keyof PlasmicSelectItem__VariantsArgs;
export const PlasmicSelectItem__VariantProps = new Array<VariantPropType>(
  "isActive",
  "isDisabled"
);

export type PlasmicSelectItem__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  showLeftSection?: boolean;
  showRightSection?: boolean;
  onClick?: (item: any) => void;
  label?: React.ReactNode;
};
type ArgPropType = keyof PlasmicSelectItem__ArgsType;
export const PlasmicSelectItem__ArgProps = new Array<ArgPropType>(
  "children",
  "slot",
  "showLeftSection",
  "showRightSection",
  "onClick",
  "label"
);

export type PlasmicSelectItem__OverridesType = {
  container?: Flex__<"div">;
  selectItem?: Flex__<"div">;
  rightSection?: Flex__<"div">;
  svg?: Flex__<"svg">;
};

export interface DefaultSelectItemProps {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  showLeftSection?: boolean;
  showRightSection?: boolean;
  onClick?: (item: any) => void;
  label?: React.ReactNode;
  isActive?: SingleBooleanChoiceArg<"isActive">;
  isDisabled?: SingleBooleanChoiceArg<"isDisabled">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSelectItem__RenderFunc(props: {
  variants: PlasmicSelectItem__VariantsArgs;
  args: PlasmicSelectItem__ArgsType;
  overrides: PlasmicSelectItem__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          showLeftSection: false,
          showRightSection: false
        },
        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "isActive",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isActive
      },
      {
        path: "isDisabled",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isDisabled
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"container"}
      data-plasmic-override={overrides.container}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.container,
        {
          [sty.containerisActive]: hasVariant($state, "isActive", "isActive"),
          [sty.containerisDisabled]: hasVariant(
            $state,
            "isDisabled",
            "isDisabled"
          )
        }
      )}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"selectItem"}
        data-plasmic-override={overrides.selectItem}
        hasGap={true}
        className={classNames(projectcss.all, sty.selectItem, {
          [sty.selectItemisActive]: hasVariant($state, "isActive", "isActive"),
          [sty.selectItemisDisabled]: hasVariant(
            $state,
            "isDisabled",
            "isDisabled"
          )
        })}
        onClick={async event => {
          const $steps = {};

          $steps["runOnClick"] = true
            ? (() => {
                const actionArgs = { eventRef: $props["onClick"] };
                return (({ eventRef, args }) => {
                  return eventRef?.(...(args ?? []));
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["runOnClick"] != null &&
            typeof $steps["runOnClick"] === "object" &&
            typeof $steps["runOnClick"].then === "function"
          ) {
            $steps["runOnClick"] = await $steps["runOnClick"];
          }
        }}
      >
        {(() => {
          try {
            return (() => {
              return $props.showLeftSection;
            })();
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })()
          ? renderPlasmicSlot({
              defaultContents: (
                <WarningDiamondsvgIcon
                  className={classNames(projectcss.all, sty.svg__ucZVq)}
                  role={"img"}
                />
              ),

              value: args.children
            })
          : null}
        {renderPlasmicSlot({
          defaultContents: "Select Item",
          value: args.label,
          className: classNames(sty.slotTargetLabel, {
            [sty.slotTargetLabelisActive]: hasVariant(
              $state,
              "isActive",
              "isActive"
            )
          })
        })}
        <Stack__
          as={"div"}
          data-plasmic-name={"rightSection"}
          data-plasmic-override={overrides.rightSection}
          hasGap={true}
          className={classNames(projectcss.all, sty.rightSection, {
            [sty.rightSectionisActive]: hasVariant(
              $state,
              "isActive",
              "isActive"
            )
          })}
        >
          {(() => {
            try {
              return $props.showRightSection;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })()
            ? renderPlasmicSlot({
                defaultContents: (
                  <WarningDiamondsvgIcon
                    className={classNames(projectcss.all, sty.svg__wbCmW)}
                    role={"img"}
                  />
                ),

                value: args.slot
              })
            : null}
          {(hasVariant($state, "isActive", "isActive") ? true : false) ? (
            <CheckCircleDuotonesvgIcon
              data-plasmic-name={"svg"}
              data-plasmic-override={overrides.svg}
              className={classNames(projectcss.all, sty.svg, {
                [sty.svgisActive]: hasVariant($state, "isActive", "isActive")
              })}
              role={"img"}
            />
          ) : null}
        </Stack__>
      </Stack__>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  container: ["container", "selectItem", "rightSection", "svg"],
  selectItem: ["selectItem", "rightSection", "svg"],
  rightSection: ["rightSection", "svg"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  container: "div";
  selectItem: "div";
  rightSection: "div";
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSelectItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSelectItem__VariantsArgs;
    args?: PlasmicSelectItem__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSelectItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSelectItem__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSelectItem__ArgProps,
          internalVariantPropNames: PlasmicSelectItem__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSelectItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "container") {
    func.displayName = "PlasmicSelectItem";
  } else {
    func.displayName = `PlasmicSelectItem.${nodeName}`;
  }
  return func;
}

export const PlasmicSelectItem = Object.assign(
  // Top-level PlasmicSelectItem renders the root element
  makeNodeComponent("container"),
  {
    // Helper components rendering sub-elements
    selectItem: makeNodeComponent("selectItem"),
    rightSection: makeNodeComponent("rightSection"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicSelectItem
    internalVariantProps: PlasmicSelectItem__VariantProps,
    internalArgProps: PlasmicSelectItem__ArgProps
  }
);

export default PlasmicSelectItem;
/* prettier-ignore-end */
