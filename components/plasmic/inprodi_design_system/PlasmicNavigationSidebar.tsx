// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5nPYJMkHKsudqrrya3SLGq
// Component: rjCX_w8hD0o4

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import MenuItem from "../../MenuItem"; // plasmic-import: KcpCffGmy6kt/component
import MenuGroup from "../../MenuGroup"; // plasmic-import: VPuDrZG7cL_L/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 5nPYJMkHKsudqrrya3SLGq/projectcss
import sty from "./PlasmicNavigationSidebar.module.css"; // plasmic-import: rjCX_w8hD0o4/css

import ScrollDuotonesvgIcon from "./icons/PlasmicIcon__ScrollDuotonesvg"; // plasmic-import: 8QgUleY3Rjyy/icon

createPlasmicElementProxy;

export type PlasmicNavigationSidebar__VariantMembers = {};
export type PlasmicNavigationSidebar__VariantsArgs = {};
type VariantPropType = keyof PlasmicNavigationSidebar__VariantsArgs;
export const PlasmicNavigationSidebar__VariantProps =
  new Array<VariantPropType>();

export type PlasmicNavigationSidebar__ArgsType = {
  topContent?: React.ReactNode;
  items?: React.ReactNode;
  showTopSection?: boolean;
  showFooter?: boolean;
  footerContent?: React.ReactNode;
};
type ArgPropType = keyof PlasmicNavigationSidebar__ArgsType;
export const PlasmicNavigationSidebar__ArgProps = new Array<ArgPropType>(
  "topContent",
  "items",
  "showTopSection",
  "showFooter",
  "footerContent"
);

export type PlasmicNavigationSidebar__OverridesType = {
  navigationMenu?: Flex__<"div">;
  topSection?: Flex__<"div">;
  menu?: Flex__<"div">;
  footer?: Flex__<"div">;
};

export interface DefaultNavigationSidebarProps {
  topContent?: React.ReactNode;
  items?: React.ReactNode;
  showTopSection?: boolean;
  showFooter?: boolean;
  footerContent?: React.ReactNode;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNavigationSidebar__RenderFunc(props: {
  variants: PlasmicNavigationSidebar__VariantsArgs;
  args: PlasmicNavigationSidebar__ArgsType;
  overrides: PlasmicNavigationSidebar__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          showTopSection: true,
          showFooter: true
        },
        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  return (
    <div
      data-plasmic-name={"navigationMenu"}
      data-plasmic-override={overrides.navigationMenu}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.navigationMenu
      )}
    >
      {(() => {
        try {
          return $props.showTopSection;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <div
          data-plasmic-name={"topSection"}
          data-plasmic-override={overrides.topSection}
          className={classNames(projectcss.all, sty.topSection)}
        >
          {renderPlasmicSlot({
            defaultContents: null,
            value: args.topContent
          })}
        </div>
      ) : null}
      <div
        data-plasmic-name={"menu"}
        data-plasmic-override={overrides.menu}
        className={classNames(projectcss.all, sty.menu)}
      >
        {renderPlasmicSlot({
          defaultContents: (
            <React.Fragment>
              <MenuItem
                className={classNames("__wab_instance", sty.menuItem__nzBji)}
                isActive={(() => {
                  try {
                    return (() => {
                      return $ctx.pagePath.includes("itemKey");
                    })();
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()}
              />

              <MenuGroup
                className={classNames("__wab_instance", sty.menuGroup__tqd0D)}
              />
            </React.Fragment>
          ),

          value: args.items
        })}
      </div>
      {(() => {
        try {
          return $props.showFooter;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <div
          data-plasmic-name={"footer"}
          data-plasmic-override={overrides.footer}
          className={classNames(projectcss.all, sty.footer)}
        >
          {renderPlasmicSlot({
            defaultContents: null,
            value: args.footerContent
          })}
        </div>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  navigationMenu: ["navigationMenu", "topSection", "menu", "footer"],
  topSection: ["topSection"],
  menu: ["menu"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  navigationMenu: "div";
  topSection: "div";
  menu: "div";
  footer: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNavigationSidebar__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNavigationSidebar__VariantsArgs;
    args?: PlasmicNavigationSidebar__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNavigationSidebar__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicNavigationSidebar__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNavigationSidebar__ArgProps,
          internalVariantPropNames: PlasmicNavigationSidebar__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNavigationSidebar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "navigationMenu") {
    func.displayName = "PlasmicNavigationSidebar";
  } else {
    func.displayName = `PlasmicNavigationSidebar.${nodeName}`;
  }
  return func;
}

export const PlasmicNavigationSidebar = Object.assign(
  // Top-level PlasmicNavigationSidebar renders the root element
  makeNodeComponent("navigationMenu"),
  {
    // Helper components rendering sub-elements
    topSection: makeNodeComponent("topSection"),
    menu: makeNodeComponent("menu"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicNavigationSidebar
    internalVariantProps: PlasmicNavigationSidebar__VariantProps,
    internalArgProps: PlasmicNavigationSidebar__ArgProps
  }
);

export default PlasmicNavigationSidebar;
/* prettier-ignore-end */
