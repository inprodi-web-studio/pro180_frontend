// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5nPYJMkHKsudqrrya3SLGq
// Component: NxJEJ3yCzHgk

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 5nPYJMkHKsudqrrya3SLGq/projectcss
import sty from "./PlasmicTitleText.module.css"; // plasmic-import: NxJEJ3yCzHgk/css

createPlasmicElementProxy;

export type PlasmicTitleText__VariantMembers = {
  size: "sm" | "md" | "lg";
  direction: "left" | "center" | "right";
};
export type PlasmicTitleText__VariantsArgs = {
  size?: SingleChoiceArg<"sm" | "md" | "lg">;
  direction?: SingleChoiceArg<"left" | "center" | "right">;
};
type VariantPropType = keyof PlasmicTitleText__VariantsArgs;
export const PlasmicTitleText__VariantProps = new Array<VariantPropType>(
  "size",
  "direction"
);

export type PlasmicTitleText__ArgsType = {
  title?: React.ReactNode;
  secondaryText?: React.ReactNode;
};
type ArgPropType = keyof PlasmicTitleText__ArgsType;
export const PlasmicTitleText__ArgProps = new Array<ArgPropType>(
  "title",
  "secondaryText"
);

export type PlasmicTitleText__OverridesType = {
  container?: Flex__<"div">;
};

export interface DefaultTitleTextProps {
  title?: React.ReactNode;
  secondaryText?: React.ReactNode;
  size?: SingleChoiceArg<"sm" | "md" | "lg">;
  direction?: SingleChoiceArg<"left" | "center" | "right">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicTitleText__RenderFunc(props: {
  variants: PlasmicTitleText__VariantsArgs;
  args: PlasmicTitleText__ArgsType;
  overrides: PlasmicTitleText__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "size",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.size
      },
      {
        path: "direction",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.direction
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"container"}
      data-plasmic-override={overrides.container}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.container,
        {
          [sty.containerdirection_center]: hasVariant(
            $state,
            "direction",
            "center"
          ),
          [sty.containerdirection_left]: hasVariant(
            $state,
            "direction",
            "left"
          ),
          [sty.containerdirection_right]: hasVariant(
            $state,
            "direction",
            "right"
          ),
          [sty.containersize_lg]: hasVariant($state, "size", "lg"),
          [sty.containersize_md]: hasVariant($state, "size", "md"),
          [sty.containersize_sm]: hasVariant($state, "size", "sm")
        }
      )}
    >
      {renderPlasmicSlot({
        defaultContents: "Small Title",
        value: args.title,
        className: classNames(sty.slotTargetTitle, {
          [sty.slotTargetTitledirection_center]: hasVariant(
            $state,
            "direction",
            "center"
          ),
          [sty.slotTargetTitledirection_right]: hasVariant(
            $state,
            "direction",
            "right"
          ),
          [sty.slotTargetTitlesize_lg]: hasVariant($state, "size", "lg"),
          [sty.slotTargetTitlesize_sm]: hasVariant($state, "size", "sm")
        })
      })}
      {renderPlasmicSlot({
        defaultContents: "SM Light Text",
        value: args.secondaryText,
        className: classNames(sty.slotTargetSecondaryText, {
          [sty.slotTargetSecondaryTextdirection_center]: hasVariant(
            $state,
            "direction",
            "center"
          ),
          [sty.slotTargetSecondaryTextdirection_right]: hasVariant(
            $state,
            "direction",
            "right"
          ),
          [sty.slotTargetSecondaryTextsize_lg]: hasVariant(
            $state,
            "size",
            "lg"
          ),
          [sty.slotTargetSecondaryTextsize_md]: hasVariant(
            $state,
            "size",
            "md"
          ),
          [sty.slotTargetSecondaryTextsize_sm]: hasVariant($state, "size", "sm")
        })
      })}
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  container: ["container"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  container: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTitleText__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTitleText__VariantsArgs;
    args?: PlasmicTitleText__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTitleText__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicTitleText__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicTitleText__ArgProps,
          internalVariantPropNames: PlasmicTitleText__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicTitleText__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "container") {
    func.displayName = "PlasmicTitleText";
  } else {
    func.displayName = `PlasmicTitleText.${nodeName}`;
  }
  return func;
}

export const PlasmicTitleText = Object.assign(
  // Top-level PlasmicTitleText renders the root element
  makeNodeComponent("container"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicTitleText
    internalVariantProps: PlasmicTitleText__VariantProps,
    internalArgProps: PlasmicTitleText__ArgProps
  }
);

export default PlasmicTitleText;
/* prettier-ignore-end */
