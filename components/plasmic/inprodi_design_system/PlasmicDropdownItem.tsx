// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5nPYJMkHKsudqrrya3SLGq
// Component: XOGoYay1a3bq

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 5nPYJMkHKsudqrrya3SLGq/projectcss
import sty from "./PlasmicDropdownItem.module.css"; // plasmic-import: XOGoYay1a3bq/css

import InfosvgIcon from "./icons/PlasmicIcon__Infosvg"; // plasmic-import: 2_kwtnaSzZgd/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: una6cYu9eGPt/icon

createPlasmicElementProxy;

export type PlasmicDropdownItem__VariantMembers = {
  isSelected: "isSelected";
};
export type PlasmicDropdownItem__VariantsArgs = {
  isSelected?: SingleBooleanChoiceArg<"isSelected">;
};
type VariantPropType = keyof PlasmicDropdownItem__VariantsArgs;
export const PlasmicDropdownItem__VariantProps = new Array<VariantPropType>(
  "isSelected"
);

export type PlasmicDropdownItem__ArgsType = {
  label?: React.ReactNode;
  icon?: React.ReactNode;
  leftSection?: boolean;
  onIsSelectedChange?: (val: any) => void;
  onClick?: () => void;
};
type ArgPropType = keyof PlasmicDropdownItem__ArgsType;
export const PlasmicDropdownItem__ArgProps = new Array<ArgPropType>(
  "label",
  "icon",
  "leftSection",
  "onIsSelectedChange",
  "onClick"
);

export type PlasmicDropdownItem__OverridesType = {
  container?: Flex__<"div">;
  svg2?: Flex__<"svg">;
};

export interface DefaultDropdownItemProps {
  label?: React.ReactNode;
  icon?: React.ReactNode;
  leftSection?: boolean;
  onIsSelectedChange?: (val: any) => void;
  onClick?: () => void;
  isSelected?: SingleBooleanChoiceArg<"isSelected">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicDropdownItem__RenderFunc(props: {
  variants: PlasmicDropdownItem__VariantsArgs;
  args: PlasmicDropdownItem__ArgsType;
  overrides: PlasmicDropdownItem__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          leftSection: true
        },
        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "isSelected",
        type: "writable",
        variableType: "variant",

        valueProp: "isSelected",
        onChangeProp: "onIsSelectedChange"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"container"}
      data-plasmic-override={overrides.container}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.container,
        {
          [sty.containerisSelected]: hasVariant(
            $state,
            "isSelected",
            "isSelected"
          )
        }
      )}
      onClick={async event => {
        const $steps = {};
      }}
    >
      {(() => {
        try {
          return $props.leftSection;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })()
        ? renderPlasmicSlot({
            defaultContents: (
              <InfosvgIcon
                className={classNames(projectcss.all, sty.svg__fZzp)}
                role={"img"}
              />
            ),

            value: args.icon
          })
        : null}
      {renderPlasmicSlot({
        defaultContents: (
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__b0TfM
            )}
          >
            {"Dropdown Item"}
          </div>
        ),
        value: args.label,
        className: classNames(sty.slotTargetLabel, {
          [sty.slotTargetLabelisSelected]: hasVariant(
            $state,
            "isSelected",
            "isSelected"
          )
        })
      })}
      {(hasVariant($state, "isSelected", "isSelected") ? true : false) ? (
        <ChecksvgIcon
          data-plasmic-name={"svg2"}
          data-plasmic-override={overrides.svg2}
          className={classNames(projectcss.all, sty.svg2, {
            [sty.svg2isSelected]: hasVariant($state, "isSelected", "isSelected")
          })}
          role={"img"}
        />
      ) : null}
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  container: ["container", "svg2"],
  svg2: ["svg2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  container: "div";
  svg2: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDropdownItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDropdownItem__VariantsArgs;
    args?: PlasmicDropdownItem__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicDropdownItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicDropdownItem__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicDropdownItem__ArgProps,
          internalVariantPropNames: PlasmicDropdownItem__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicDropdownItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "container") {
    func.displayName = "PlasmicDropdownItem";
  } else {
    func.displayName = `PlasmicDropdownItem.${nodeName}`;
  }
  return func;
}

export const PlasmicDropdownItem = Object.assign(
  // Top-level PlasmicDropdownItem renders the root element
  makeNodeComponent("container"),
  {
    // Helper components rendering sub-elements
    svg2: makeNodeComponent("svg2"),

    // Metadata about props expected for PlasmicDropdownItem
    internalVariantProps: PlasmicDropdownItem__VariantProps,
    internalArgProps: PlasmicDropdownItem__ArgProps
  }
);

export default PlasmicDropdownItem;
/* prettier-ignore-end */
